// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChronoMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ChronoMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ChronoMessages {
class VehicleMessage_MVectorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VehicleMessage_MVector> {
} _VehicleMessage_MVector_default_instance_;
class VehicleMessage_MQuaternionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VehicleMessage_MQuaternion> {
} _VehicleMessage_MQuaternion_default_instance_;
class VehicleMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VehicleMessage> {
} _VehicleMessage_default_instance_;

namespace protobuf_ChronoMessages_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMessage_MVector, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMessage_MVector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMessage_MVector, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMessage_MVector, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMessage_MVector, z_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMessage_MQuaternion, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMessage_MQuaternion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMessage_MQuaternion, e0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMessage_MQuaternion, e1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMessage_MQuaternion, e2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMessage_MQuaternion, e3_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMessage, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMessage, vehicleid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMessage, chtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMessage, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMessage, chassiscom_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMessage, frontrightwheelcom_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMessage, frontleftwheelcom_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMessage, backrightwheelcom_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMessage, backleftwheelcom_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMessage, chassisrot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMessage, frontrightwheelrot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMessage, frontleftwheelrot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMessage, backrightwheelrot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMessage, backleftwheelrot_),
  10,
  11,
  12,
  13,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(VehicleMessage_MVector)},
  { 10, 18, sizeof(VehicleMessage_MQuaternion)},
  { 22, 40, sizeof(VehicleMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_VehicleMessage_MVector_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VehicleMessage_MQuaternion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VehicleMessage_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "ChronoMessages.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _VehicleMessage_MVector_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _VehicleMessage_MQuaternion_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _VehicleMessage_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _VehicleMessage_MVector_default_instance_.DefaultConstruct();
  _VehicleMessage_MQuaternion_default_instance_.DefaultConstruct();
  _VehicleMessage_default_instance_.DefaultConstruct();
  _VehicleMessage_default_instance_.get_mutable()->chassiscom_ = const_cast< ::ChronoMessages::VehicleMessage_MVector*>(
      ::ChronoMessages::VehicleMessage_MVector::internal_default_instance());
  _VehicleMessage_default_instance_.get_mutable()->frontrightwheelcom_ = const_cast< ::ChronoMessages::VehicleMessage_MVector*>(
      ::ChronoMessages::VehicleMessage_MVector::internal_default_instance());
  _VehicleMessage_default_instance_.get_mutable()->frontleftwheelcom_ = const_cast< ::ChronoMessages::VehicleMessage_MVector*>(
      ::ChronoMessages::VehicleMessage_MVector::internal_default_instance());
  _VehicleMessage_default_instance_.get_mutable()->backrightwheelcom_ = const_cast< ::ChronoMessages::VehicleMessage_MVector*>(
      ::ChronoMessages::VehicleMessage_MVector::internal_default_instance());
  _VehicleMessage_default_instance_.get_mutable()->backleftwheelcom_ = const_cast< ::ChronoMessages::VehicleMessage_MVector*>(
      ::ChronoMessages::VehicleMessage_MVector::internal_default_instance());
  _VehicleMessage_default_instance_.get_mutable()->chassisrot_ = const_cast< ::ChronoMessages::VehicleMessage_MQuaternion*>(
      ::ChronoMessages::VehicleMessage_MQuaternion::internal_default_instance());
  _VehicleMessage_default_instance_.get_mutable()->frontrightwheelrot_ = const_cast< ::ChronoMessages::VehicleMessage_MQuaternion*>(
      ::ChronoMessages::VehicleMessage_MQuaternion::internal_default_instance());
  _VehicleMessage_default_instance_.get_mutable()->frontleftwheelrot_ = const_cast< ::ChronoMessages::VehicleMessage_MQuaternion*>(
      ::ChronoMessages::VehicleMessage_MQuaternion::internal_default_instance());
  _VehicleMessage_default_instance_.get_mutable()->backrightwheelrot_ = const_cast< ::ChronoMessages::VehicleMessage_MQuaternion*>(
      ::ChronoMessages::VehicleMessage_MQuaternion::internal_default_instance());
  _VehicleMessage_default_instance_.get_mutable()->backleftwheelrot_ = const_cast< ::ChronoMessages::VehicleMessage_MQuaternion*>(
      ::ChronoMessages::VehicleMessage_MQuaternion::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\024ChronoMessages.proto\022\016ChronoMessages\"\344"
      "\006\n\016VehicleMessage\022\021\n\ttimestamp\030\001 \002(\005\022\021\n\t"
      "vehicleId\030\002 \002(\005\022\016\n\006chTime\030\003 \002(\001\022\r\n\005speed"
      "\030\004 \002(\001\022:\n\nChassisCOM\030\005 \002(\0132&.ChronoMessa"
      "ges.VehicleMessage.MVector\022B\n\022FrontRight"
      "WheelCOM\030\006 \002(\0132&.ChronoMessages.VehicleM"
      "essage.MVector\022A\n\021FrontLeftWheelCOM\030\007 \002("
      "\0132&.ChronoMessages.VehicleMessage.MVecto"
      "r\022A\n\021BackRightWheelCOM\030\010 \002(\0132&.ChronoMes"
      "sages.VehicleMessage.MVector\022@\n\020BackLeft"
      "WheelCOM\030\t \002(\0132&.ChronoMessages.VehicleM"
      "essage.MVector\022>\n\nChassisRot\030\n \002(\0132*.Chr"
      "onoMessages.VehicleMessage.MQuaternion\022F"
      "\n\022FrontRightWheelRot\030\013 \002(\0132*.ChronoMessa"
      "ges.VehicleMessage.MQuaternion\022E\n\021FrontL"
      "eftWheelRot\030\014 \002(\0132*.ChronoMessages.Vehic"
      "leMessage.MQuaternion\022E\n\021BackRightWheelR"
      "ot\030\r \002(\0132*.ChronoMessages.VehicleMessage"
      ".MQuaternion\022D\n\020BackLeftWheelRot\030\016 \002(\0132*"
      ".ChronoMessages.VehicleMessage.MQuaterni"
      "on\032*\n\007MVector\022\t\n\001x\030\001 \002(\001\022\t\n\001y\030\002 \002(\001\022\t\n\001z"
      "\030\003 \002(\001\032=\n\013MQuaternion\022\n\n\002e0\030\001 \002(\001\022\n\n\002e1\030"
      "\002 \002(\001\022\n\n\002e2\030\003 \002(\001\022\n\n\002e3\030\004 \002(\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 909);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ChronoMessages.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_ChronoMessages_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleMessage_MVector::kXFieldNumber;
const int VehicleMessage_MVector::kYFieldNumber;
const int VehicleMessage_MVector::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleMessage_MVector::VehicleMessage_MVector()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ChronoMessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChronoMessages.VehicleMessage.MVector)
}
VehicleMessage_MVector::VehicleMessage_MVector(const VehicleMessage_MVector& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:ChronoMessages.VehicleMessage.MVector)
}

void VehicleMessage_MVector::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
}

VehicleMessage_MVector::~VehicleMessage_MVector() {
  // @@protoc_insertion_point(destructor:ChronoMessages.VehicleMessage.MVector)
  SharedDtor();
}

void VehicleMessage_MVector::SharedDtor() {
}

void VehicleMessage_MVector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleMessage_MVector::descriptor() {
  protobuf_ChronoMessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChronoMessages_2eproto::file_level_metadata[0].descriptor;
}

const VehicleMessage_MVector& VehicleMessage_MVector::default_instance() {
  protobuf_ChronoMessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

VehicleMessage_MVector* VehicleMessage_MVector::New(::google::protobuf::Arena* arena) const {
  VehicleMessage_MVector* n = new VehicleMessage_MVector;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleMessage_MVector::Clear() {
// @@protoc_insertion_point(message_clear_start:ChronoMessages.VehicleMessage.MVector)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VehicleMessage_MVector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ChronoMessages.VehicleMessage.MVector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (tag == 9u) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double y = 2;
      case 2: {
        if (tag == 17u) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double z = 3;
      case 3: {
        if (tag == 25u) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChronoMessages.VehicleMessage.MVector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChronoMessages.VehicleMessage.MVector)
  return false;
#undef DO_
}

void VehicleMessage_MVector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChronoMessages.VehicleMessage.MVector)
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // required double z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ChronoMessages.VehicleMessage.MVector)
}

::google::protobuf::uint8* VehicleMessage_MVector::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ChronoMessages.VehicleMessage.MVector)
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // required double z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChronoMessages.VehicleMessage.MVector)
  return target;
}

size_t VehicleMessage_MVector::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ChronoMessages.VehicleMessage.MVector)
  size_t total_size = 0;

  if (has_x()) {
    // required double x = 1;
    total_size += 1 + 8;
  }

  if (has_y()) {
    // required double y = 2;
    total_size += 1 + 8;
  }

  if (has_z()) {
    // required double z = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t VehicleMessage_MVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChronoMessages.VehicleMessage.MVector)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required double x = 1;
    total_size += 1 + 8;

    // required double y = 2;
    total_size += 1 + 8;

    // required double z = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleMessage_MVector::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChronoMessages.VehicleMessage.MVector)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleMessage_MVector* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleMessage_MVector>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChronoMessages.VehicleMessage.MVector)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChronoMessages.VehicleMessage.MVector)
    MergeFrom(*source);
  }
}

void VehicleMessage_MVector::MergeFrom(const VehicleMessage_MVector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChronoMessages.VehicleMessage.MVector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
}

void VehicleMessage_MVector::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChronoMessages.VehicleMessage.MVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleMessage_MVector::CopyFrom(const VehicleMessage_MVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChronoMessages.VehicleMessage.MVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleMessage_MVector::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void VehicleMessage_MVector::Swap(VehicleMessage_MVector* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleMessage_MVector::InternalSwap(VehicleMessage_MVector* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleMessage_MVector::GetMetadata() const {
  protobuf_ChronoMessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChronoMessages_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleMessage_MVector

// required double x = 1;
bool VehicleMessage_MVector::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VehicleMessage_MVector::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void VehicleMessage_MVector::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void VehicleMessage_MVector::clear_x() {
  x_ = 0;
  clear_has_x();
}
double VehicleMessage_MVector::x() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.VehicleMessage.MVector.x)
  return x_;
}
void VehicleMessage_MVector::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:ChronoMessages.VehicleMessage.MVector.x)
}

// required double y = 2;
bool VehicleMessage_MVector::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VehicleMessage_MVector::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void VehicleMessage_MVector::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void VehicleMessage_MVector::clear_y() {
  y_ = 0;
  clear_has_y();
}
double VehicleMessage_MVector::y() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.VehicleMessage.MVector.y)
  return y_;
}
void VehicleMessage_MVector::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:ChronoMessages.VehicleMessage.MVector.y)
}

// required double z = 3;
bool VehicleMessage_MVector::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VehicleMessage_MVector::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void VehicleMessage_MVector::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void VehicleMessage_MVector::clear_z() {
  z_ = 0;
  clear_has_z();
}
double VehicleMessage_MVector::z() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.VehicleMessage.MVector.z)
  return z_;
}
void VehicleMessage_MVector::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:ChronoMessages.VehicleMessage.MVector.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleMessage_MQuaternion::kE0FieldNumber;
const int VehicleMessage_MQuaternion::kE1FieldNumber;
const int VehicleMessage_MQuaternion::kE2FieldNumber;
const int VehicleMessage_MQuaternion::kE3FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleMessage_MQuaternion::VehicleMessage_MQuaternion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ChronoMessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChronoMessages.VehicleMessage.MQuaternion)
}
VehicleMessage_MQuaternion::VehicleMessage_MQuaternion(const VehicleMessage_MQuaternion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&e0_, &from.e0_,
    reinterpret_cast<char*>(&e3_) -
    reinterpret_cast<char*>(&e0_) + sizeof(e3_));
  // @@protoc_insertion_point(copy_constructor:ChronoMessages.VehicleMessage.MQuaternion)
}

void VehicleMessage_MQuaternion::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&e0_, 0, reinterpret_cast<char*>(&e3_) -
    reinterpret_cast<char*>(&e0_) + sizeof(e3_));
}

VehicleMessage_MQuaternion::~VehicleMessage_MQuaternion() {
  // @@protoc_insertion_point(destructor:ChronoMessages.VehicleMessage.MQuaternion)
  SharedDtor();
}

void VehicleMessage_MQuaternion::SharedDtor() {
}

void VehicleMessage_MQuaternion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleMessage_MQuaternion::descriptor() {
  protobuf_ChronoMessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChronoMessages_2eproto::file_level_metadata[1].descriptor;
}

const VehicleMessage_MQuaternion& VehicleMessage_MQuaternion::default_instance() {
  protobuf_ChronoMessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

VehicleMessage_MQuaternion* VehicleMessage_MQuaternion::New(::google::protobuf::Arena* arena) const {
  VehicleMessage_MQuaternion* n = new VehicleMessage_MQuaternion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleMessage_MQuaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:ChronoMessages.VehicleMessage.MQuaternion)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&e0_, 0, reinterpret_cast<char*>(&e3_) -
      reinterpret_cast<char*>(&e0_) + sizeof(e3_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VehicleMessage_MQuaternion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ChronoMessages.VehicleMessage.MQuaternion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double e0 = 1;
      case 1: {
        if (tag == 9u) {
          set_has_e0();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &e0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double e1 = 2;
      case 2: {
        if (tag == 17u) {
          set_has_e1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &e1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double e2 = 3;
      case 3: {
        if (tag == 25u) {
          set_has_e2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &e2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double e3 = 4;
      case 4: {
        if (tag == 33u) {
          set_has_e3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &e3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChronoMessages.VehicleMessage.MQuaternion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChronoMessages.VehicleMessage.MQuaternion)
  return false;
#undef DO_
}

void VehicleMessage_MQuaternion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChronoMessages.VehicleMessage.MQuaternion)
  // required double e0 = 1;
  if (has_e0()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->e0(), output);
  }

  // required double e1 = 2;
  if (has_e1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->e1(), output);
  }

  // required double e2 = 3;
  if (has_e2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->e2(), output);
  }

  // required double e3 = 4;
  if (has_e3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->e3(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ChronoMessages.VehicleMessage.MQuaternion)
}

::google::protobuf::uint8* VehicleMessage_MQuaternion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ChronoMessages.VehicleMessage.MQuaternion)
  // required double e0 = 1;
  if (has_e0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->e0(), target);
  }

  // required double e1 = 2;
  if (has_e1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->e1(), target);
  }

  // required double e2 = 3;
  if (has_e2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->e2(), target);
  }

  // required double e3 = 4;
  if (has_e3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->e3(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChronoMessages.VehicleMessage.MQuaternion)
  return target;
}

size_t VehicleMessage_MQuaternion::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ChronoMessages.VehicleMessage.MQuaternion)
  size_t total_size = 0;

  if (has_e0()) {
    // required double e0 = 1;
    total_size += 1 + 8;
  }

  if (has_e1()) {
    // required double e1 = 2;
    total_size += 1 + 8;
  }

  if (has_e2()) {
    // required double e2 = 3;
    total_size += 1 + 8;
  }

  if (has_e3()) {
    // required double e3 = 4;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t VehicleMessage_MQuaternion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChronoMessages.VehicleMessage.MQuaternion)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required double e0 = 1;
    total_size += 1 + 8;

    // required double e1 = 2;
    total_size += 1 + 8;

    // required double e2 = 3;
    total_size += 1 + 8;

    // required double e3 = 4;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleMessage_MQuaternion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChronoMessages.VehicleMessage.MQuaternion)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleMessage_MQuaternion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleMessage_MQuaternion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChronoMessages.VehicleMessage.MQuaternion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChronoMessages.VehicleMessage.MQuaternion)
    MergeFrom(*source);
  }
}

void VehicleMessage_MQuaternion::MergeFrom(const VehicleMessage_MQuaternion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChronoMessages.VehicleMessage.MQuaternion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_e0()) {
      set_e0(from.e0());
    }
    if (from.has_e1()) {
      set_e1(from.e1());
    }
    if (from.has_e2()) {
      set_e2(from.e2());
    }
    if (from.has_e3()) {
      set_e3(from.e3());
    }
  }
}

void VehicleMessage_MQuaternion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChronoMessages.VehicleMessage.MQuaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleMessage_MQuaternion::CopyFrom(const VehicleMessage_MQuaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChronoMessages.VehicleMessage.MQuaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleMessage_MQuaternion::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void VehicleMessage_MQuaternion::Swap(VehicleMessage_MQuaternion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleMessage_MQuaternion::InternalSwap(VehicleMessage_MQuaternion* other) {
  std::swap(e0_, other->e0_);
  std::swap(e1_, other->e1_);
  std::swap(e2_, other->e2_);
  std::swap(e3_, other->e3_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleMessage_MQuaternion::GetMetadata() const {
  protobuf_ChronoMessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChronoMessages_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleMessage_MQuaternion

// required double e0 = 1;
bool VehicleMessage_MQuaternion::has_e0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VehicleMessage_MQuaternion::set_has_e0() {
  _has_bits_[0] |= 0x00000001u;
}
void VehicleMessage_MQuaternion::clear_has_e0() {
  _has_bits_[0] &= ~0x00000001u;
}
void VehicleMessage_MQuaternion::clear_e0() {
  e0_ = 0;
  clear_has_e0();
}
double VehicleMessage_MQuaternion::e0() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.VehicleMessage.MQuaternion.e0)
  return e0_;
}
void VehicleMessage_MQuaternion::set_e0(double value) {
  set_has_e0();
  e0_ = value;
  // @@protoc_insertion_point(field_set:ChronoMessages.VehicleMessage.MQuaternion.e0)
}

// required double e1 = 2;
bool VehicleMessage_MQuaternion::has_e1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VehicleMessage_MQuaternion::set_has_e1() {
  _has_bits_[0] |= 0x00000002u;
}
void VehicleMessage_MQuaternion::clear_has_e1() {
  _has_bits_[0] &= ~0x00000002u;
}
void VehicleMessage_MQuaternion::clear_e1() {
  e1_ = 0;
  clear_has_e1();
}
double VehicleMessage_MQuaternion::e1() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.VehicleMessage.MQuaternion.e1)
  return e1_;
}
void VehicleMessage_MQuaternion::set_e1(double value) {
  set_has_e1();
  e1_ = value;
  // @@protoc_insertion_point(field_set:ChronoMessages.VehicleMessage.MQuaternion.e1)
}

// required double e2 = 3;
bool VehicleMessage_MQuaternion::has_e2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VehicleMessage_MQuaternion::set_has_e2() {
  _has_bits_[0] |= 0x00000004u;
}
void VehicleMessage_MQuaternion::clear_has_e2() {
  _has_bits_[0] &= ~0x00000004u;
}
void VehicleMessage_MQuaternion::clear_e2() {
  e2_ = 0;
  clear_has_e2();
}
double VehicleMessage_MQuaternion::e2() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.VehicleMessage.MQuaternion.e2)
  return e2_;
}
void VehicleMessage_MQuaternion::set_e2(double value) {
  set_has_e2();
  e2_ = value;
  // @@protoc_insertion_point(field_set:ChronoMessages.VehicleMessage.MQuaternion.e2)
}

// required double e3 = 4;
bool VehicleMessage_MQuaternion::has_e3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VehicleMessage_MQuaternion::set_has_e3() {
  _has_bits_[0] |= 0x00000008u;
}
void VehicleMessage_MQuaternion::clear_has_e3() {
  _has_bits_[0] &= ~0x00000008u;
}
void VehicleMessage_MQuaternion::clear_e3() {
  e3_ = 0;
  clear_has_e3();
}
double VehicleMessage_MQuaternion::e3() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.VehicleMessage.MQuaternion.e3)
  return e3_;
}
void VehicleMessage_MQuaternion::set_e3(double value) {
  set_has_e3();
  e3_ = value;
  // @@protoc_insertion_point(field_set:ChronoMessages.VehicleMessage.MQuaternion.e3)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleMessage::kTimestampFieldNumber;
const int VehicleMessage::kVehicleIdFieldNumber;
const int VehicleMessage::kChTimeFieldNumber;
const int VehicleMessage::kSpeedFieldNumber;
const int VehicleMessage::kChassisCOMFieldNumber;
const int VehicleMessage::kFrontRightWheelCOMFieldNumber;
const int VehicleMessage::kFrontLeftWheelCOMFieldNumber;
const int VehicleMessage::kBackRightWheelCOMFieldNumber;
const int VehicleMessage::kBackLeftWheelCOMFieldNumber;
const int VehicleMessage::kChassisRotFieldNumber;
const int VehicleMessage::kFrontRightWheelRotFieldNumber;
const int VehicleMessage::kFrontLeftWheelRotFieldNumber;
const int VehicleMessage::kBackRightWheelRotFieldNumber;
const int VehicleMessage::kBackLeftWheelRotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleMessage::VehicleMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ChronoMessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChronoMessages.VehicleMessage)
}
VehicleMessage::VehicleMessage(const VehicleMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_chassiscom()) {
    chassiscom_ = new ::ChronoMessages::VehicleMessage_MVector(*from.chassiscom_);
  } else {
    chassiscom_ = NULL;
  }
  if (from.has_frontrightwheelcom()) {
    frontrightwheelcom_ = new ::ChronoMessages::VehicleMessage_MVector(*from.frontrightwheelcom_);
  } else {
    frontrightwheelcom_ = NULL;
  }
  if (from.has_frontleftwheelcom()) {
    frontleftwheelcom_ = new ::ChronoMessages::VehicleMessage_MVector(*from.frontleftwheelcom_);
  } else {
    frontleftwheelcom_ = NULL;
  }
  if (from.has_backrightwheelcom()) {
    backrightwheelcom_ = new ::ChronoMessages::VehicleMessage_MVector(*from.backrightwheelcom_);
  } else {
    backrightwheelcom_ = NULL;
  }
  if (from.has_backleftwheelcom()) {
    backleftwheelcom_ = new ::ChronoMessages::VehicleMessage_MVector(*from.backleftwheelcom_);
  } else {
    backleftwheelcom_ = NULL;
  }
  if (from.has_chassisrot()) {
    chassisrot_ = new ::ChronoMessages::VehicleMessage_MQuaternion(*from.chassisrot_);
  } else {
    chassisrot_ = NULL;
  }
  if (from.has_frontrightwheelrot()) {
    frontrightwheelrot_ = new ::ChronoMessages::VehicleMessage_MQuaternion(*from.frontrightwheelrot_);
  } else {
    frontrightwheelrot_ = NULL;
  }
  if (from.has_frontleftwheelrot()) {
    frontleftwheelrot_ = new ::ChronoMessages::VehicleMessage_MQuaternion(*from.frontleftwheelrot_);
  } else {
    frontleftwheelrot_ = NULL;
  }
  if (from.has_backrightwheelrot()) {
    backrightwheelrot_ = new ::ChronoMessages::VehicleMessage_MQuaternion(*from.backrightwheelrot_);
  } else {
    backrightwheelrot_ = NULL;
  }
  if (from.has_backleftwheelrot()) {
    backleftwheelrot_ = new ::ChronoMessages::VehicleMessage_MQuaternion(*from.backleftwheelrot_);
  } else {
    backleftwheelrot_ = NULL;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(speed_));
  // @@protoc_insertion_point(copy_constructor:ChronoMessages.VehicleMessage)
}

void VehicleMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&chassiscom_, 0, reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&chassiscom_) + sizeof(speed_));
}

VehicleMessage::~VehicleMessage() {
  // @@protoc_insertion_point(destructor:ChronoMessages.VehicleMessage)
  SharedDtor();
}

void VehicleMessage::SharedDtor() {
  if (this != internal_default_instance()) {
    delete chassiscom_;
  }
  if (this != internal_default_instance()) {
    delete frontrightwheelcom_;
  }
  if (this != internal_default_instance()) {
    delete frontleftwheelcom_;
  }
  if (this != internal_default_instance()) {
    delete backrightwheelcom_;
  }
  if (this != internal_default_instance()) {
    delete backleftwheelcom_;
  }
  if (this != internal_default_instance()) {
    delete chassisrot_;
  }
  if (this != internal_default_instance()) {
    delete frontrightwheelrot_;
  }
  if (this != internal_default_instance()) {
    delete frontleftwheelrot_;
  }
  if (this != internal_default_instance()) {
    delete backrightwheelrot_;
  }
  if (this != internal_default_instance()) {
    delete backleftwheelrot_;
  }
}

void VehicleMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleMessage::descriptor() {
  protobuf_ChronoMessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChronoMessages_2eproto::file_level_metadata[2].descriptor;
}

const VehicleMessage& VehicleMessage::default_instance() {
  protobuf_ChronoMessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

VehicleMessage* VehicleMessage::New(::google::protobuf::Arena* arena) const {
  VehicleMessage* n = new VehicleMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ChronoMessages.VehicleMessage)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_chassiscom()) {
      GOOGLE_DCHECK(chassiscom_ != NULL);
      chassiscom_->::ChronoMessages::VehicleMessage_MVector::Clear();
    }
    if (has_frontrightwheelcom()) {
      GOOGLE_DCHECK(frontrightwheelcom_ != NULL);
      frontrightwheelcom_->::ChronoMessages::VehicleMessage_MVector::Clear();
    }
    if (has_frontleftwheelcom()) {
      GOOGLE_DCHECK(frontleftwheelcom_ != NULL);
      frontleftwheelcom_->::ChronoMessages::VehicleMessage_MVector::Clear();
    }
    if (has_backrightwheelcom()) {
      GOOGLE_DCHECK(backrightwheelcom_ != NULL);
      backrightwheelcom_->::ChronoMessages::VehicleMessage_MVector::Clear();
    }
    if (has_backleftwheelcom()) {
      GOOGLE_DCHECK(backleftwheelcom_ != NULL);
      backleftwheelcom_->::ChronoMessages::VehicleMessage_MVector::Clear();
    }
    if (has_chassisrot()) {
      GOOGLE_DCHECK(chassisrot_ != NULL);
      chassisrot_->::ChronoMessages::VehicleMessage_MQuaternion::Clear();
    }
    if (has_frontrightwheelrot()) {
      GOOGLE_DCHECK(frontrightwheelrot_ != NULL);
      frontrightwheelrot_->::ChronoMessages::VehicleMessage_MQuaternion::Clear();
    }
    if (has_frontleftwheelrot()) {
      GOOGLE_DCHECK(frontleftwheelrot_ != NULL);
      frontleftwheelrot_->::ChronoMessages::VehicleMessage_MQuaternion::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 768u) {
    if (has_backrightwheelrot()) {
      GOOGLE_DCHECK(backrightwheelrot_ != NULL);
      backrightwheelrot_->::ChronoMessages::VehicleMessage_MQuaternion::Clear();
    }
    if (has_backleftwheelrot()) {
      GOOGLE_DCHECK(backleftwheelrot_ != NULL);
      backleftwheelrot_->::ChronoMessages::VehicleMessage_MQuaternion::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 15360u) {
    ::memset(&timestamp_, 0, reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&timestamp_) + sizeof(speed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VehicleMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ChronoMessages.VehicleMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 timestamp = 1;
      case 1: {
        if (tag == 8u) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 vehicleId = 2;
      case 2: {
        if (tag == 16u) {
          set_has_vehicleid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vehicleid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double chTime = 3;
      case 3: {
        if (tag == 25u) {
          set_has_chtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &chtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double speed = 4;
      case 4: {
        if (tag == 33u) {
          set_has_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ChronoMessages.VehicleMessage.MVector ChassisCOM = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chassiscom()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ChronoMessages.VehicleMessage.MVector FrontRightWheelCOM = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frontrightwheelcom()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ChronoMessages.VehicleMessage.MVector FrontLeftWheelCOM = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frontleftwheelcom()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ChronoMessages.VehicleMessage.MVector BackRightWheelCOM = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_backrightwheelcom()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ChronoMessages.VehicleMessage.MVector BackLeftWheelCOM = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_backleftwheelcom()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ChronoMessages.VehicleMessage.MQuaternion ChassisRot = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chassisrot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ChronoMessages.VehicleMessage.MQuaternion FrontRightWheelRot = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frontrightwheelrot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ChronoMessages.VehicleMessage.MQuaternion FrontLeftWheelRot = 12;
      case 12: {
        if (tag == 98u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frontleftwheelrot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ChronoMessages.VehicleMessage.MQuaternion BackRightWheelRot = 13;
      case 13: {
        if (tag == 106u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_backrightwheelrot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ChronoMessages.VehicleMessage.MQuaternion BackLeftWheelRot = 14;
      case 14: {
        if (tag == 114u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_backleftwheelrot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChronoMessages.VehicleMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChronoMessages.VehicleMessage)
  return false;
#undef DO_
}

void VehicleMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChronoMessages.VehicleMessage)
  // required int32 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->timestamp(), output);
  }

  // required int32 vehicleId = 2;
  if (has_vehicleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->vehicleid(), output);
  }

  // required double chTime = 3;
  if (has_chtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->chtime(), output);
  }

  // required double speed = 4;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->speed(), output);
  }

  // required .ChronoMessages.VehicleMessage.MVector ChassisCOM = 5;
  if (has_chassiscom()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->chassiscom_, output);
  }

  // required .ChronoMessages.VehicleMessage.MVector FrontRightWheelCOM = 6;
  if (has_frontrightwheelcom()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->frontrightwheelcom_, output);
  }

  // required .ChronoMessages.VehicleMessage.MVector FrontLeftWheelCOM = 7;
  if (has_frontleftwheelcom()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->frontleftwheelcom_, output);
  }

  // required .ChronoMessages.VehicleMessage.MVector BackRightWheelCOM = 8;
  if (has_backrightwheelcom()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->backrightwheelcom_, output);
  }

  // required .ChronoMessages.VehicleMessage.MVector BackLeftWheelCOM = 9;
  if (has_backleftwheelcom()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->backleftwheelcom_, output);
  }

  // required .ChronoMessages.VehicleMessage.MQuaternion ChassisRot = 10;
  if (has_chassisrot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->chassisrot_, output);
  }

  // required .ChronoMessages.VehicleMessage.MQuaternion FrontRightWheelRot = 11;
  if (has_frontrightwheelrot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->frontrightwheelrot_, output);
  }

  // required .ChronoMessages.VehicleMessage.MQuaternion FrontLeftWheelRot = 12;
  if (has_frontleftwheelrot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->frontleftwheelrot_, output);
  }

  // required .ChronoMessages.VehicleMessage.MQuaternion BackRightWheelRot = 13;
  if (has_backrightwheelrot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->backrightwheelrot_, output);
  }

  // required .ChronoMessages.VehicleMessage.MQuaternion BackLeftWheelRot = 14;
  if (has_backleftwheelrot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->backleftwheelrot_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ChronoMessages.VehicleMessage)
}

::google::protobuf::uint8* VehicleMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ChronoMessages.VehicleMessage)
  // required int32 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->timestamp(), target);
  }

  // required int32 vehicleId = 2;
  if (has_vehicleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->vehicleid(), target);
  }

  // required double chTime = 3;
  if (has_chtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->chtime(), target);
  }

  // required double speed = 4;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->speed(), target);
  }

  // required .ChronoMessages.VehicleMessage.MVector ChassisCOM = 5;
  if (has_chassiscom()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->chassiscom_, false, target);
  }

  // required .ChronoMessages.VehicleMessage.MVector FrontRightWheelCOM = 6;
  if (has_frontrightwheelcom()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->frontrightwheelcom_, false, target);
  }

  // required .ChronoMessages.VehicleMessage.MVector FrontLeftWheelCOM = 7;
  if (has_frontleftwheelcom()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->frontleftwheelcom_, false, target);
  }

  // required .ChronoMessages.VehicleMessage.MVector BackRightWheelCOM = 8;
  if (has_backrightwheelcom()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->backrightwheelcom_, false, target);
  }

  // required .ChronoMessages.VehicleMessage.MVector BackLeftWheelCOM = 9;
  if (has_backleftwheelcom()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->backleftwheelcom_, false, target);
  }

  // required .ChronoMessages.VehicleMessage.MQuaternion ChassisRot = 10;
  if (has_chassisrot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->chassisrot_, false, target);
  }

  // required .ChronoMessages.VehicleMessage.MQuaternion FrontRightWheelRot = 11;
  if (has_frontrightwheelrot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->frontrightwheelrot_, false, target);
  }

  // required .ChronoMessages.VehicleMessage.MQuaternion FrontLeftWheelRot = 12;
  if (has_frontleftwheelrot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->frontleftwheelrot_, false, target);
  }

  // required .ChronoMessages.VehicleMessage.MQuaternion BackRightWheelRot = 13;
  if (has_backrightwheelrot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->backrightwheelrot_, false, target);
  }

  // required .ChronoMessages.VehicleMessage.MQuaternion BackLeftWheelRot = 14;
  if (has_backleftwheelrot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->backleftwheelrot_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChronoMessages.VehicleMessage)
  return target;
}

size_t VehicleMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ChronoMessages.VehicleMessage)
  size_t total_size = 0;

  if (has_chassiscom()) {
    // required .ChronoMessages.VehicleMessage.MVector ChassisCOM = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->chassiscom_);
  }

  if (has_frontrightwheelcom()) {
    // required .ChronoMessages.VehicleMessage.MVector FrontRightWheelCOM = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->frontrightwheelcom_);
  }

  if (has_frontleftwheelcom()) {
    // required .ChronoMessages.VehicleMessage.MVector FrontLeftWheelCOM = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->frontleftwheelcom_);
  }

  if (has_backrightwheelcom()) {
    // required .ChronoMessages.VehicleMessage.MVector BackRightWheelCOM = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->backrightwheelcom_);
  }

  if (has_backleftwheelcom()) {
    // required .ChronoMessages.VehicleMessage.MVector BackLeftWheelCOM = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->backleftwheelcom_);
  }

  if (has_chassisrot()) {
    // required .ChronoMessages.VehicleMessage.MQuaternion ChassisRot = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->chassisrot_);
  }

  if (has_frontrightwheelrot()) {
    // required .ChronoMessages.VehicleMessage.MQuaternion FrontRightWheelRot = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->frontrightwheelrot_);
  }

  if (has_frontleftwheelrot()) {
    // required .ChronoMessages.VehicleMessage.MQuaternion FrontLeftWheelRot = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->frontleftwheelrot_);
  }

  if (has_backrightwheelrot()) {
    // required .ChronoMessages.VehicleMessage.MQuaternion BackRightWheelRot = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->backrightwheelrot_);
  }

  if (has_backleftwheelrot()) {
    // required .ChronoMessages.VehicleMessage.MQuaternion BackLeftWheelRot = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->backleftwheelrot_);
  }

  if (has_timestamp()) {
    // required int32 timestamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->timestamp());
  }

  if (has_vehicleid()) {
    // required int32 vehicleId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vehicleid());
  }

  if (has_chtime()) {
    // required double chTime = 3;
    total_size += 1 + 8;
  }

  if (has_speed()) {
    // required double speed = 4;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t VehicleMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChronoMessages.VehicleMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00003fff) ^ 0x00003fff) == 0) {  // All required fields are present.
    // required .ChronoMessages.VehicleMessage.MVector ChassisCOM = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->chassiscom_);

    // required .ChronoMessages.VehicleMessage.MVector FrontRightWheelCOM = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->frontrightwheelcom_);

    // required .ChronoMessages.VehicleMessage.MVector FrontLeftWheelCOM = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->frontleftwheelcom_);

    // required .ChronoMessages.VehicleMessage.MVector BackRightWheelCOM = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->backrightwheelcom_);

    // required .ChronoMessages.VehicleMessage.MVector BackLeftWheelCOM = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->backleftwheelcom_);

    // required .ChronoMessages.VehicleMessage.MQuaternion ChassisRot = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->chassisrot_);

    // required .ChronoMessages.VehicleMessage.MQuaternion FrontRightWheelRot = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->frontrightwheelrot_);

    // required .ChronoMessages.VehicleMessage.MQuaternion FrontLeftWheelRot = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->frontleftwheelrot_);

    // required .ChronoMessages.VehicleMessage.MQuaternion BackRightWheelRot = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->backrightwheelrot_);

    // required .ChronoMessages.VehicleMessage.MQuaternion BackLeftWheelRot = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->backleftwheelrot_);

    // required int32 timestamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->timestamp());

    // required int32 vehicleId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vehicleid());

    // required double chTime = 3;
    total_size += 1 + 8;

    // required double speed = 4;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChronoMessages.VehicleMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChronoMessages.VehicleMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChronoMessages.VehicleMessage)
    MergeFrom(*source);
  }
}

void VehicleMessage::MergeFrom(const VehicleMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChronoMessages.VehicleMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_chassiscom()) {
      mutable_chassiscom()->::ChronoMessages::VehicleMessage_MVector::MergeFrom(from.chassiscom());
    }
    if (from.has_frontrightwheelcom()) {
      mutable_frontrightwheelcom()->::ChronoMessages::VehicleMessage_MVector::MergeFrom(from.frontrightwheelcom());
    }
    if (from.has_frontleftwheelcom()) {
      mutable_frontleftwheelcom()->::ChronoMessages::VehicleMessage_MVector::MergeFrom(from.frontleftwheelcom());
    }
    if (from.has_backrightwheelcom()) {
      mutable_backrightwheelcom()->::ChronoMessages::VehicleMessage_MVector::MergeFrom(from.backrightwheelcom());
    }
    if (from.has_backleftwheelcom()) {
      mutable_backleftwheelcom()->::ChronoMessages::VehicleMessage_MVector::MergeFrom(from.backleftwheelcom());
    }
    if (from.has_chassisrot()) {
      mutable_chassisrot()->::ChronoMessages::VehicleMessage_MQuaternion::MergeFrom(from.chassisrot());
    }
    if (from.has_frontrightwheelrot()) {
      mutable_frontrightwheelrot()->::ChronoMessages::VehicleMessage_MQuaternion::MergeFrom(from.frontrightwheelrot());
    }
    if (from.has_frontleftwheelrot()) {
      mutable_frontleftwheelrot()->::ChronoMessages::VehicleMessage_MQuaternion::MergeFrom(from.frontleftwheelrot());
    }
  }
  if (from._has_bits_[8 / 32] & 16128u) {
    if (from.has_backrightwheelrot()) {
      mutable_backrightwheelrot()->::ChronoMessages::VehicleMessage_MQuaternion::MergeFrom(from.backrightwheelrot());
    }
    if (from.has_backleftwheelrot()) {
      mutable_backleftwheelrot()->::ChronoMessages::VehicleMessage_MQuaternion::MergeFrom(from.backleftwheelrot());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_vehicleid()) {
      set_vehicleid(from.vehicleid());
    }
    if (from.has_chtime()) {
      set_chtime(from.chtime());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
  }
}

void VehicleMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChronoMessages.VehicleMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleMessage::CopyFrom(const VehicleMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChronoMessages.VehicleMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003fff) != 0x00003fff) return false;
  if (has_chassiscom()) {
    if (!this->chassiscom_->IsInitialized()) return false;
  }
  if (has_frontrightwheelcom()) {
    if (!this->frontrightwheelcom_->IsInitialized()) return false;
  }
  if (has_frontleftwheelcom()) {
    if (!this->frontleftwheelcom_->IsInitialized()) return false;
  }
  if (has_backrightwheelcom()) {
    if (!this->backrightwheelcom_->IsInitialized()) return false;
  }
  if (has_backleftwheelcom()) {
    if (!this->backleftwheelcom_->IsInitialized()) return false;
  }
  if (has_chassisrot()) {
    if (!this->chassisrot_->IsInitialized()) return false;
  }
  if (has_frontrightwheelrot()) {
    if (!this->frontrightwheelrot_->IsInitialized()) return false;
  }
  if (has_frontleftwheelrot()) {
    if (!this->frontleftwheelrot_->IsInitialized()) return false;
  }
  if (has_backrightwheelrot()) {
    if (!this->backrightwheelrot_->IsInitialized()) return false;
  }
  if (has_backleftwheelrot()) {
    if (!this->backleftwheelrot_->IsInitialized()) return false;
  }
  return true;
}

void VehicleMessage::Swap(VehicleMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleMessage::InternalSwap(VehicleMessage* other) {
  std::swap(chassiscom_, other->chassiscom_);
  std::swap(frontrightwheelcom_, other->frontrightwheelcom_);
  std::swap(frontleftwheelcom_, other->frontleftwheelcom_);
  std::swap(backrightwheelcom_, other->backrightwheelcom_);
  std::swap(backleftwheelcom_, other->backleftwheelcom_);
  std::swap(chassisrot_, other->chassisrot_);
  std::swap(frontrightwheelrot_, other->frontrightwheelrot_);
  std::swap(frontleftwheelrot_, other->frontleftwheelrot_);
  std::swap(backrightwheelrot_, other->backrightwheelrot_);
  std::swap(backleftwheelrot_, other->backleftwheelrot_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(vehicleid_, other->vehicleid_);
  std::swap(chtime_, other->chtime_);
  std::swap(speed_, other->speed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleMessage::GetMetadata() const {
  protobuf_ChronoMessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChronoMessages_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleMessage

// required int32 timestamp = 1;
bool VehicleMessage::has_timestamp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void VehicleMessage::set_has_timestamp() {
  _has_bits_[0] |= 0x00000400u;
}
void VehicleMessage::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000400u;
}
void VehicleMessage::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
::google::protobuf::int32 VehicleMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.VehicleMessage.timestamp)
  return timestamp_;
}
void VehicleMessage::set_timestamp(::google::protobuf::int32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ChronoMessages.VehicleMessage.timestamp)
}

// required int32 vehicleId = 2;
bool VehicleMessage::has_vehicleid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void VehicleMessage::set_has_vehicleid() {
  _has_bits_[0] |= 0x00000800u;
}
void VehicleMessage::clear_has_vehicleid() {
  _has_bits_[0] &= ~0x00000800u;
}
void VehicleMessage::clear_vehicleid() {
  vehicleid_ = 0;
  clear_has_vehicleid();
}
::google::protobuf::int32 VehicleMessage::vehicleid() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.VehicleMessage.vehicleId)
  return vehicleid_;
}
void VehicleMessage::set_vehicleid(::google::protobuf::int32 value) {
  set_has_vehicleid();
  vehicleid_ = value;
  // @@protoc_insertion_point(field_set:ChronoMessages.VehicleMessage.vehicleId)
}

// required double chTime = 3;
bool VehicleMessage::has_chtime() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void VehicleMessage::set_has_chtime() {
  _has_bits_[0] |= 0x00001000u;
}
void VehicleMessage::clear_has_chtime() {
  _has_bits_[0] &= ~0x00001000u;
}
void VehicleMessage::clear_chtime() {
  chtime_ = 0;
  clear_has_chtime();
}
double VehicleMessage::chtime() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.VehicleMessage.chTime)
  return chtime_;
}
void VehicleMessage::set_chtime(double value) {
  set_has_chtime();
  chtime_ = value;
  // @@protoc_insertion_point(field_set:ChronoMessages.VehicleMessage.chTime)
}

// required double speed = 4;
bool VehicleMessage::has_speed() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void VehicleMessage::set_has_speed() {
  _has_bits_[0] |= 0x00002000u;
}
void VehicleMessage::clear_has_speed() {
  _has_bits_[0] &= ~0x00002000u;
}
void VehicleMessage::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
double VehicleMessage::speed() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.VehicleMessage.speed)
  return speed_;
}
void VehicleMessage::set_speed(double value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:ChronoMessages.VehicleMessage.speed)
}

// required .ChronoMessages.VehicleMessage.MVector ChassisCOM = 5;
bool VehicleMessage::has_chassiscom() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VehicleMessage::set_has_chassiscom() {
  _has_bits_[0] |= 0x00000001u;
}
void VehicleMessage::clear_has_chassiscom() {
  _has_bits_[0] &= ~0x00000001u;
}
void VehicleMessage::clear_chassiscom() {
  if (chassiscom_ != NULL) chassiscom_->::ChronoMessages::VehicleMessage_MVector::Clear();
  clear_has_chassiscom();
}
const ::ChronoMessages::VehicleMessage_MVector& VehicleMessage::chassiscom() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.VehicleMessage.ChassisCOM)
  return chassiscom_ != NULL ? *chassiscom_
                         : *::ChronoMessages::VehicleMessage_MVector::internal_default_instance();
}
::ChronoMessages::VehicleMessage_MVector* VehicleMessage::mutable_chassiscom() {
  set_has_chassiscom();
  if (chassiscom_ == NULL) {
    chassiscom_ = new ::ChronoMessages::VehicleMessage_MVector;
  }
  // @@protoc_insertion_point(field_mutable:ChronoMessages.VehicleMessage.ChassisCOM)
  return chassiscom_;
}
::ChronoMessages::VehicleMessage_MVector* VehicleMessage::release_chassiscom() {
  // @@protoc_insertion_point(field_release:ChronoMessages.VehicleMessage.ChassisCOM)
  clear_has_chassiscom();
  ::ChronoMessages::VehicleMessage_MVector* temp = chassiscom_;
  chassiscom_ = NULL;
  return temp;
}
void VehicleMessage::set_allocated_chassiscom(::ChronoMessages::VehicleMessage_MVector* chassiscom) {
  delete chassiscom_;
  chassiscom_ = chassiscom;
  if (chassiscom) {
    set_has_chassiscom();
  } else {
    clear_has_chassiscom();
  }
  // @@protoc_insertion_point(field_set_allocated:ChronoMessages.VehicleMessage.ChassisCOM)
}

// required .ChronoMessages.VehicleMessage.MVector FrontRightWheelCOM = 6;
bool VehicleMessage::has_frontrightwheelcom() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VehicleMessage::set_has_frontrightwheelcom() {
  _has_bits_[0] |= 0x00000002u;
}
void VehicleMessage::clear_has_frontrightwheelcom() {
  _has_bits_[0] &= ~0x00000002u;
}
void VehicleMessage::clear_frontrightwheelcom() {
  if (frontrightwheelcom_ != NULL) frontrightwheelcom_->::ChronoMessages::VehicleMessage_MVector::Clear();
  clear_has_frontrightwheelcom();
}
const ::ChronoMessages::VehicleMessage_MVector& VehicleMessage::frontrightwheelcom() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.VehicleMessage.FrontRightWheelCOM)
  return frontrightwheelcom_ != NULL ? *frontrightwheelcom_
                         : *::ChronoMessages::VehicleMessage_MVector::internal_default_instance();
}
::ChronoMessages::VehicleMessage_MVector* VehicleMessage::mutable_frontrightwheelcom() {
  set_has_frontrightwheelcom();
  if (frontrightwheelcom_ == NULL) {
    frontrightwheelcom_ = new ::ChronoMessages::VehicleMessage_MVector;
  }
  // @@protoc_insertion_point(field_mutable:ChronoMessages.VehicleMessage.FrontRightWheelCOM)
  return frontrightwheelcom_;
}
::ChronoMessages::VehicleMessage_MVector* VehicleMessage::release_frontrightwheelcom() {
  // @@protoc_insertion_point(field_release:ChronoMessages.VehicleMessage.FrontRightWheelCOM)
  clear_has_frontrightwheelcom();
  ::ChronoMessages::VehicleMessage_MVector* temp = frontrightwheelcom_;
  frontrightwheelcom_ = NULL;
  return temp;
}
void VehicleMessage::set_allocated_frontrightwheelcom(::ChronoMessages::VehicleMessage_MVector* frontrightwheelcom) {
  delete frontrightwheelcom_;
  frontrightwheelcom_ = frontrightwheelcom;
  if (frontrightwheelcom) {
    set_has_frontrightwheelcom();
  } else {
    clear_has_frontrightwheelcom();
  }
  // @@protoc_insertion_point(field_set_allocated:ChronoMessages.VehicleMessage.FrontRightWheelCOM)
}

// required .ChronoMessages.VehicleMessage.MVector FrontLeftWheelCOM = 7;
bool VehicleMessage::has_frontleftwheelcom() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VehicleMessage::set_has_frontleftwheelcom() {
  _has_bits_[0] |= 0x00000004u;
}
void VehicleMessage::clear_has_frontleftwheelcom() {
  _has_bits_[0] &= ~0x00000004u;
}
void VehicleMessage::clear_frontleftwheelcom() {
  if (frontleftwheelcom_ != NULL) frontleftwheelcom_->::ChronoMessages::VehicleMessage_MVector::Clear();
  clear_has_frontleftwheelcom();
}
const ::ChronoMessages::VehicleMessage_MVector& VehicleMessage::frontleftwheelcom() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.VehicleMessage.FrontLeftWheelCOM)
  return frontleftwheelcom_ != NULL ? *frontleftwheelcom_
                         : *::ChronoMessages::VehicleMessage_MVector::internal_default_instance();
}
::ChronoMessages::VehicleMessage_MVector* VehicleMessage::mutable_frontleftwheelcom() {
  set_has_frontleftwheelcom();
  if (frontleftwheelcom_ == NULL) {
    frontleftwheelcom_ = new ::ChronoMessages::VehicleMessage_MVector;
  }
  // @@protoc_insertion_point(field_mutable:ChronoMessages.VehicleMessage.FrontLeftWheelCOM)
  return frontleftwheelcom_;
}
::ChronoMessages::VehicleMessage_MVector* VehicleMessage::release_frontleftwheelcom() {
  // @@protoc_insertion_point(field_release:ChronoMessages.VehicleMessage.FrontLeftWheelCOM)
  clear_has_frontleftwheelcom();
  ::ChronoMessages::VehicleMessage_MVector* temp = frontleftwheelcom_;
  frontleftwheelcom_ = NULL;
  return temp;
}
void VehicleMessage::set_allocated_frontleftwheelcom(::ChronoMessages::VehicleMessage_MVector* frontleftwheelcom) {
  delete frontleftwheelcom_;
  frontleftwheelcom_ = frontleftwheelcom;
  if (frontleftwheelcom) {
    set_has_frontleftwheelcom();
  } else {
    clear_has_frontleftwheelcom();
  }
  // @@protoc_insertion_point(field_set_allocated:ChronoMessages.VehicleMessage.FrontLeftWheelCOM)
}

// required .ChronoMessages.VehicleMessage.MVector BackRightWheelCOM = 8;
bool VehicleMessage::has_backrightwheelcom() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VehicleMessage::set_has_backrightwheelcom() {
  _has_bits_[0] |= 0x00000008u;
}
void VehicleMessage::clear_has_backrightwheelcom() {
  _has_bits_[0] &= ~0x00000008u;
}
void VehicleMessage::clear_backrightwheelcom() {
  if (backrightwheelcom_ != NULL) backrightwheelcom_->::ChronoMessages::VehicleMessage_MVector::Clear();
  clear_has_backrightwheelcom();
}
const ::ChronoMessages::VehicleMessage_MVector& VehicleMessage::backrightwheelcom() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.VehicleMessage.BackRightWheelCOM)
  return backrightwheelcom_ != NULL ? *backrightwheelcom_
                         : *::ChronoMessages::VehicleMessage_MVector::internal_default_instance();
}
::ChronoMessages::VehicleMessage_MVector* VehicleMessage::mutable_backrightwheelcom() {
  set_has_backrightwheelcom();
  if (backrightwheelcom_ == NULL) {
    backrightwheelcom_ = new ::ChronoMessages::VehicleMessage_MVector;
  }
  // @@protoc_insertion_point(field_mutable:ChronoMessages.VehicleMessage.BackRightWheelCOM)
  return backrightwheelcom_;
}
::ChronoMessages::VehicleMessage_MVector* VehicleMessage::release_backrightwheelcom() {
  // @@protoc_insertion_point(field_release:ChronoMessages.VehicleMessage.BackRightWheelCOM)
  clear_has_backrightwheelcom();
  ::ChronoMessages::VehicleMessage_MVector* temp = backrightwheelcom_;
  backrightwheelcom_ = NULL;
  return temp;
}
void VehicleMessage::set_allocated_backrightwheelcom(::ChronoMessages::VehicleMessage_MVector* backrightwheelcom) {
  delete backrightwheelcom_;
  backrightwheelcom_ = backrightwheelcom;
  if (backrightwheelcom) {
    set_has_backrightwheelcom();
  } else {
    clear_has_backrightwheelcom();
  }
  // @@protoc_insertion_point(field_set_allocated:ChronoMessages.VehicleMessage.BackRightWheelCOM)
}

// required .ChronoMessages.VehicleMessage.MVector BackLeftWheelCOM = 9;
bool VehicleMessage::has_backleftwheelcom() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VehicleMessage::set_has_backleftwheelcom() {
  _has_bits_[0] |= 0x00000010u;
}
void VehicleMessage::clear_has_backleftwheelcom() {
  _has_bits_[0] &= ~0x00000010u;
}
void VehicleMessage::clear_backleftwheelcom() {
  if (backleftwheelcom_ != NULL) backleftwheelcom_->::ChronoMessages::VehicleMessage_MVector::Clear();
  clear_has_backleftwheelcom();
}
const ::ChronoMessages::VehicleMessage_MVector& VehicleMessage::backleftwheelcom() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.VehicleMessage.BackLeftWheelCOM)
  return backleftwheelcom_ != NULL ? *backleftwheelcom_
                         : *::ChronoMessages::VehicleMessage_MVector::internal_default_instance();
}
::ChronoMessages::VehicleMessage_MVector* VehicleMessage::mutable_backleftwheelcom() {
  set_has_backleftwheelcom();
  if (backleftwheelcom_ == NULL) {
    backleftwheelcom_ = new ::ChronoMessages::VehicleMessage_MVector;
  }
  // @@protoc_insertion_point(field_mutable:ChronoMessages.VehicleMessage.BackLeftWheelCOM)
  return backleftwheelcom_;
}
::ChronoMessages::VehicleMessage_MVector* VehicleMessage::release_backleftwheelcom() {
  // @@protoc_insertion_point(field_release:ChronoMessages.VehicleMessage.BackLeftWheelCOM)
  clear_has_backleftwheelcom();
  ::ChronoMessages::VehicleMessage_MVector* temp = backleftwheelcom_;
  backleftwheelcom_ = NULL;
  return temp;
}
void VehicleMessage::set_allocated_backleftwheelcom(::ChronoMessages::VehicleMessage_MVector* backleftwheelcom) {
  delete backleftwheelcom_;
  backleftwheelcom_ = backleftwheelcom;
  if (backleftwheelcom) {
    set_has_backleftwheelcom();
  } else {
    clear_has_backleftwheelcom();
  }
  // @@protoc_insertion_point(field_set_allocated:ChronoMessages.VehicleMessage.BackLeftWheelCOM)
}

// required .ChronoMessages.VehicleMessage.MQuaternion ChassisRot = 10;
bool VehicleMessage::has_chassisrot() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VehicleMessage::set_has_chassisrot() {
  _has_bits_[0] |= 0x00000020u;
}
void VehicleMessage::clear_has_chassisrot() {
  _has_bits_[0] &= ~0x00000020u;
}
void VehicleMessage::clear_chassisrot() {
  if (chassisrot_ != NULL) chassisrot_->::ChronoMessages::VehicleMessage_MQuaternion::Clear();
  clear_has_chassisrot();
}
const ::ChronoMessages::VehicleMessage_MQuaternion& VehicleMessage::chassisrot() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.VehicleMessage.ChassisRot)
  return chassisrot_ != NULL ? *chassisrot_
                         : *::ChronoMessages::VehicleMessage_MQuaternion::internal_default_instance();
}
::ChronoMessages::VehicleMessage_MQuaternion* VehicleMessage::mutable_chassisrot() {
  set_has_chassisrot();
  if (chassisrot_ == NULL) {
    chassisrot_ = new ::ChronoMessages::VehicleMessage_MQuaternion;
  }
  // @@protoc_insertion_point(field_mutable:ChronoMessages.VehicleMessage.ChassisRot)
  return chassisrot_;
}
::ChronoMessages::VehicleMessage_MQuaternion* VehicleMessage::release_chassisrot() {
  // @@protoc_insertion_point(field_release:ChronoMessages.VehicleMessage.ChassisRot)
  clear_has_chassisrot();
  ::ChronoMessages::VehicleMessage_MQuaternion* temp = chassisrot_;
  chassisrot_ = NULL;
  return temp;
}
void VehicleMessage::set_allocated_chassisrot(::ChronoMessages::VehicleMessage_MQuaternion* chassisrot) {
  delete chassisrot_;
  chassisrot_ = chassisrot;
  if (chassisrot) {
    set_has_chassisrot();
  } else {
    clear_has_chassisrot();
  }
  // @@protoc_insertion_point(field_set_allocated:ChronoMessages.VehicleMessage.ChassisRot)
}

// required .ChronoMessages.VehicleMessage.MQuaternion FrontRightWheelRot = 11;
bool VehicleMessage::has_frontrightwheelrot() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VehicleMessage::set_has_frontrightwheelrot() {
  _has_bits_[0] |= 0x00000040u;
}
void VehicleMessage::clear_has_frontrightwheelrot() {
  _has_bits_[0] &= ~0x00000040u;
}
void VehicleMessage::clear_frontrightwheelrot() {
  if (frontrightwheelrot_ != NULL) frontrightwheelrot_->::ChronoMessages::VehicleMessage_MQuaternion::Clear();
  clear_has_frontrightwheelrot();
}
const ::ChronoMessages::VehicleMessage_MQuaternion& VehicleMessage::frontrightwheelrot() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.VehicleMessage.FrontRightWheelRot)
  return frontrightwheelrot_ != NULL ? *frontrightwheelrot_
                         : *::ChronoMessages::VehicleMessage_MQuaternion::internal_default_instance();
}
::ChronoMessages::VehicleMessage_MQuaternion* VehicleMessage::mutable_frontrightwheelrot() {
  set_has_frontrightwheelrot();
  if (frontrightwheelrot_ == NULL) {
    frontrightwheelrot_ = new ::ChronoMessages::VehicleMessage_MQuaternion;
  }
  // @@protoc_insertion_point(field_mutable:ChronoMessages.VehicleMessage.FrontRightWheelRot)
  return frontrightwheelrot_;
}
::ChronoMessages::VehicleMessage_MQuaternion* VehicleMessage::release_frontrightwheelrot() {
  // @@protoc_insertion_point(field_release:ChronoMessages.VehicleMessage.FrontRightWheelRot)
  clear_has_frontrightwheelrot();
  ::ChronoMessages::VehicleMessage_MQuaternion* temp = frontrightwheelrot_;
  frontrightwheelrot_ = NULL;
  return temp;
}
void VehicleMessage::set_allocated_frontrightwheelrot(::ChronoMessages::VehicleMessage_MQuaternion* frontrightwheelrot) {
  delete frontrightwheelrot_;
  frontrightwheelrot_ = frontrightwheelrot;
  if (frontrightwheelrot) {
    set_has_frontrightwheelrot();
  } else {
    clear_has_frontrightwheelrot();
  }
  // @@protoc_insertion_point(field_set_allocated:ChronoMessages.VehicleMessage.FrontRightWheelRot)
}

// required .ChronoMessages.VehicleMessage.MQuaternion FrontLeftWheelRot = 12;
bool VehicleMessage::has_frontleftwheelrot() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void VehicleMessage::set_has_frontleftwheelrot() {
  _has_bits_[0] |= 0x00000080u;
}
void VehicleMessage::clear_has_frontleftwheelrot() {
  _has_bits_[0] &= ~0x00000080u;
}
void VehicleMessage::clear_frontleftwheelrot() {
  if (frontleftwheelrot_ != NULL) frontleftwheelrot_->::ChronoMessages::VehicleMessage_MQuaternion::Clear();
  clear_has_frontleftwheelrot();
}
const ::ChronoMessages::VehicleMessage_MQuaternion& VehicleMessage::frontleftwheelrot() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.VehicleMessage.FrontLeftWheelRot)
  return frontleftwheelrot_ != NULL ? *frontleftwheelrot_
                         : *::ChronoMessages::VehicleMessage_MQuaternion::internal_default_instance();
}
::ChronoMessages::VehicleMessage_MQuaternion* VehicleMessage::mutable_frontleftwheelrot() {
  set_has_frontleftwheelrot();
  if (frontleftwheelrot_ == NULL) {
    frontleftwheelrot_ = new ::ChronoMessages::VehicleMessage_MQuaternion;
  }
  // @@protoc_insertion_point(field_mutable:ChronoMessages.VehicleMessage.FrontLeftWheelRot)
  return frontleftwheelrot_;
}
::ChronoMessages::VehicleMessage_MQuaternion* VehicleMessage::release_frontleftwheelrot() {
  // @@protoc_insertion_point(field_release:ChronoMessages.VehicleMessage.FrontLeftWheelRot)
  clear_has_frontleftwheelrot();
  ::ChronoMessages::VehicleMessage_MQuaternion* temp = frontleftwheelrot_;
  frontleftwheelrot_ = NULL;
  return temp;
}
void VehicleMessage::set_allocated_frontleftwheelrot(::ChronoMessages::VehicleMessage_MQuaternion* frontleftwheelrot) {
  delete frontleftwheelrot_;
  frontleftwheelrot_ = frontleftwheelrot;
  if (frontleftwheelrot) {
    set_has_frontleftwheelrot();
  } else {
    clear_has_frontleftwheelrot();
  }
  // @@protoc_insertion_point(field_set_allocated:ChronoMessages.VehicleMessage.FrontLeftWheelRot)
}

// required .ChronoMessages.VehicleMessage.MQuaternion BackRightWheelRot = 13;
bool VehicleMessage::has_backrightwheelrot() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void VehicleMessage::set_has_backrightwheelrot() {
  _has_bits_[0] |= 0x00000100u;
}
void VehicleMessage::clear_has_backrightwheelrot() {
  _has_bits_[0] &= ~0x00000100u;
}
void VehicleMessage::clear_backrightwheelrot() {
  if (backrightwheelrot_ != NULL) backrightwheelrot_->::ChronoMessages::VehicleMessage_MQuaternion::Clear();
  clear_has_backrightwheelrot();
}
const ::ChronoMessages::VehicleMessage_MQuaternion& VehicleMessage::backrightwheelrot() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.VehicleMessage.BackRightWheelRot)
  return backrightwheelrot_ != NULL ? *backrightwheelrot_
                         : *::ChronoMessages::VehicleMessage_MQuaternion::internal_default_instance();
}
::ChronoMessages::VehicleMessage_MQuaternion* VehicleMessage::mutable_backrightwheelrot() {
  set_has_backrightwheelrot();
  if (backrightwheelrot_ == NULL) {
    backrightwheelrot_ = new ::ChronoMessages::VehicleMessage_MQuaternion;
  }
  // @@protoc_insertion_point(field_mutable:ChronoMessages.VehicleMessage.BackRightWheelRot)
  return backrightwheelrot_;
}
::ChronoMessages::VehicleMessage_MQuaternion* VehicleMessage::release_backrightwheelrot() {
  // @@protoc_insertion_point(field_release:ChronoMessages.VehicleMessage.BackRightWheelRot)
  clear_has_backrightwheelrot();
  ::ChronoMessages::VehicleMessage_MQuaternion* temp = backrightwheelrot_;
  backrightwheelrot_ = NULL;
  return temp;
}
void VehicleMessage::set_allocated_backrightwheelrot(::ChronoMessages::VehicleMessage_MQuaternion* backrightwheelrot) {
  delete backrightwheelrot_;
  backrightwheelrot_ = backrightwheelrot;
  if (backrightwheelrot) {
    set_has_backrightwheelrot();
  } else {
    clear_has_backrightwheelrot();
  }
  // @@protoc_insertion_point(field_set_allocated:ChronoMessages.VehicleMessage.BackRightWheelRot)
}

// required .ChronoMessages.VehicleMessage.MQuaternion BackLeftWheelRot = 14;
bool VehicleMessage::has_backleftwheelrot() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void VehicleMessage::set_has_backleftwheelrot() {
  _has_bits_[0] |= 0x00000200u;
}
void VehicleMessage::clear_has_backleftwheelrot() {
  _has_bits_[0] &= ~0x00000200u;
}
void VehicleMessage::clear_backleftwheelrot() {
  if (backleftwheelrot_ != NULL) backleftwheelrot_->::ChronoMessages::VehicleMessage_MQuaternion::Clear();
  clear_has_backleftwheelrot();
}
const ::ChronoMessages::VehicleMessage_MQuaternion& VehicleMessage::backleftwheelrot() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.VehicleMessage.BackLeftWheelRot)
  return backleftwheelrot_ != NULL ? *backleftwheelrot_
                         : *::ChronoMessages::VehicleMessage_MQuaternion::internal_default_instance();
}
::ChronoMessages::VehicleMessage_MQuaternion* VehicleMessage::mutable_backleftwheelrot() {
  set_has_backleftwheelrot();
  if (backleftwheelrot_ == NULL) {
    backleftwheelrot_ = new ::ChronoMessages::VehicleMessage_MQuaternion;
  }
  // @@protoc_insertion_point(field_mutable:ChronoMessages.VehicleMessage.BackLeftWheelRot)
  return backleftwheelrot_;
}
::ChronoMessages::VehicleMessage_MQuaternion* VehicleMessage::release_backleftwheelrot() {
  // @@protoc_insertion_point(field_release:ChronoMessages.VehicleMessage.BackLeftWheelRot)
  clear_has_backleftwheelrot();
  ::ChronoMessages::VehicleMessage_MQuaternion* temp = backleftwheelrot_;
  backleftwheelrot_ = NULL;
  return temp;
}
void VehicleMessage::set_allocated_backleftwheelrot(::ChronoMessages::VehicleMessage_MQuaternion* backleftwheelrot) {
  delete backleftwheelrot_;
  backleftwheelrot_ = backleftwheelrot;
  if (backleftwheelrot) {
    set_has_backleftwheelrot();
  } else {
    clear_has_backleftwheelrot();
  }
  // @@protoc_insertion_point(field_set_allocated:ChronoMessages.VehicleMessage.BackLeftWheelRot)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ChronoMessages

// @@protoc_insertion_point(global_scope)

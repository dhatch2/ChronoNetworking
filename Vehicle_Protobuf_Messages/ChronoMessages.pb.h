// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChronoMessages.proto

#ifndef PROTOBUF_ChronoMessages_2eproto__INCLUDED
#define PROTOBUF_ChronoMessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ChronoMessages {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_ChronoMessages_2eproto();
void protobuf_AssignDesc_ChronoMessages_2eproto();
void protobuf_ShutdownFile_ChronoMessages_2eproto();

class VehicleMessage;
class VehicleMessage_MQuaternion;
class VehicleMessage_MVector;

// ===================================================================

class VehicleMessage_MVector : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ChronoMessages.VehicleMessage.MVector) */ {
 public:
  VehicleMessage_MVector();
  virtual ~VehicleMessage_MVector();

  VehicleMessage_MVector(const VehicleMessage_MVector& from);

  inline VehicleMessage_MVector& operator=(const VehicleMessage_MVector& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleMessage_MVector& default_instance();

  void Swap(VehicleMessage_MVector* other);

  // implements Message ----------------------------------------------

  inline VehicleMessage_MVector* New() const { return New(NULL); }

  VehicleMessage_MVector* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VehicleMessage_MVector& from);
  void MergeFrom(const VehicleMessage_MVector& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VehicleMessage_MVector* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // required double y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // required double z = 3;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // @@protoc_insertion_point(class_scope:ChronoMessages.VehicleMessage.MVector)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double x_;
  double y_;
  double z_;
  friend void  protobuf_AddDesc_ChronoMessages_2eproto();
  friend void protobuf_AssignDesc_ChronoMessages_2eproto();
  friend void protobuf_ShutdownFile_ChronoMessages_2eproto();

  void InitAsDefaultInstance();
  static VehicleMessage_MVector* default_instance_;
};
// -------------------------------------------------------------------

class VehicleMessage_MQuaternion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ChronoMessages.VehicleMessage.MQuaternion) */ {
 public:
  VehicleMessage_MQuaternion();
  virtual ~VehicleMessage_MQuaternion();

  VehicleMessage_MQuaternion(const VehicleMessage_MQuaternion& from);

  inline VehicleMessage_MQuaternion& operator=(const VehicleMessage_MQuaternion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleMessage_MQuaternion& default_instance();

  void Swap(VehicleMessage_MQuaternion* other);

  // implements Message ----------------------------------------------

  inline VehicleMessage_MQuaternion* New() const { return New(NULL); }

  VehicleMessage_MQuaternion* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VehicleMessage_MQuaternion& from);
  void MergeFrom(const VehicleMessage_MQuaternion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VehicleMessage_MQuaternion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double e0 = 1;
  bool has_e0() const;
  void clear_e0();
  static const int kE0FieldNumber = 1;
  double e0() const;
  void set_e0(double value);

  // required double e1 = 2;
  bool has_e1() const;
  void clear_e1();
  static const int kE1FieldNumber = 2;
  double e1() const;
  void set_e1(double value);

  // required double e2 = 3;
  bool has_e2() const;
  void clear_e2();
  static const int kE2FieldNumber = 3;
  double e2() const;
  void set_e2(double value);

  // required double e3 = 4;
  bool has_e3() const;
  void clear_e3();
  static const int kE3FieldNumber = 4;
  double e3() const;
  void set_e3(double value);

  // @@protoc_insertion_point(class_scope:ChronoMessages.VehicleMessage.MQuaternion)
 private:
  inline void set_has_e0();
  inline void clear_has_e0();
  inline void set_has_e1();
  inline void clear_has_e1();
  inline void set_has_e2();
  inline void clear_has_e2();
  inline void set_has_e3();
  inline void clear_has_e3();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double e0_;
  double e1_;
  double e2_;
  double e3_;
  friend void  protobuf_AddDesc_ChronoMessages_2eproto();
  friend void protobuf_AssignDesc_ChronoMessages_2eproto();
  friend void protobuf_ShutdownFile_ChronoMessages_2eproto();

  void InitAsDefaultInstance();
  static VehicleMessage_MQuaternion* default_instance_;
};
// -------------------------------------------------------------------

class VehicleMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ChronoMessages.VehicleMessage) */ {
 public:
  VehicleMessage();
  virtual ~VehicleMessage();

  VehicleMessage(const VehicleMessage& from);

  inline VehicleMessage& operator=(const VehicleMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleMessage& default_instance();

  void Swap(VehicleMessage* other);

  // implements Message ----------------------------------------------

  inline VehicleMessage* New() const { return New(NULL); }

  VehicleMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VehicleMessage& from);
  void MergeFrom(const VehicleMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VehicleMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef VehicleMessage_MVector MVector;
  typedef VehicleMessage_MQuaternion MQuaternion;

  // accessors -------------------------------------------------------

  // required int32 timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::int32 timestamp() const;
  void set_timestamp(::google::protobuf::int32 value);

  // required int32 vehicleId = 2;
  bool has_vehicleid() const;
  void clear_vehicleid();
  static const int kVehicleIdFieldNumber = 2;
  ::google::protobuf::int32 vehicleid() const;
  void set_vehicleid(::google::protobuf::int32 value);

  // required double chTime = 3;
  bool has_chtime() const;
  void clear_chtime();
  static const int kChTimeFieldNumber = 3;
  double chtime() const;
  void set_chtime(double value);

  // required double speed = 4;
  bool has_speed() const;
  void clear_speed();
  static const int kSpeedFieldNumber = 4;
  double speed() const;
  void set_speed(double value);

  // required .ChronoMessages.VehicleMessage.MVector ChassisCOM = 5;
  bool has_chassiscom() const;
  void clear_chassiscom();
  static const int kChassisCOMFieldNumber = 5;
  const ::ChronoMessages::VehicleMessage_MVector& chassiscom() const;
  ::ChronoMessages::VehicleMessage_MVector* mutable_chassiscom();
  ::ChronoMessages::VehicleMessage_MVector* release_chassiscom();
  void set_allocated_chassiscom(::ChronoMessages::VehicleMessage_MVector* chassiscom);

  // required .ChronoMessages.VehicleMessage.MVector FrontRightWheelCOM = 6;
  bool has_frontrightwheelcom() const;
  void clear_frontrightwheelcom();
  static const int kFrontRightWheelCOMFieldNumber = 6;
  const ::ChronoMessages::VehicleMessage_MVector& frontrightwheelcom() const;
  ::ChronoMessages::VehicleMessage_MVector* mutable_frontrightwheelcom();
  ::ChronoMessages::VehicleMessage_MVector* release_frontrightwheelcom();
  void set_allocated_frontrightwheelcom(::ChronoMessages::VehicleMessage_MVector* frontrightwheelcom);

  // required .ChronoMessages.VehicleMessage.MVector FrontLeftWheelCOM = 7;
  bool has_frontleftwheelcom() const;
  void clear_frontleftwheelcom();
  static const int kFrontLeftWheelCOMFieldNumber = 7;
  const ::ChronoMessages::VehicleMessage_MVector& frontleftwheelcom() const;
  ::ChronoMessages::VehicleMessage_MVector* mutable_frontleftwheelcom();
  ::ChronoMessages::VehicleMessage_MVector* release_frontleftwheelcom();
  void set_allocated_frontleftwheelcom(::ChronoMessages::VehicleMessage_MVector* frontleftwheelcom);

  // required .ChronoMessages.VehicleMessage.MVector BackRightWheelCOM = 8;
  bool has_backrightwheelcom() const;
  void clear_backrightwheelcom();
  static const int kBackRightWheelCOMFieldNumber = 8;
  const ::ChronoMessages::VehicleMessage_MVector& backrightwheelcom() const;
  ::ChronoMessages::VehicleMessage_MVector* mutable_backrightwheelcom();
  ::ChronoMessages::VehicleMessage_MVector* release_backrightwheelcom();
  void set_allocated_backrightwheelcom(::ChronoMessages::VehicleMessage_MVector* backrightwheelcom);

  // required .ChronoMessages.VehicleMessage.MVector BackLeftWheelCOM = 9;
  bool has_backleftwheelcom() const;
  void clear_backleftwheelcom();
  static const int kBackLeftWheelCOMFieldNumber = 9;
  const ::ChronoMessages::VehicleMessage_MVector& backleftwheelcom() const;
  ::ChronoMessages::VehicleMessage_MVector* mutable_backleftwheelcom();
  ::ChronoMessages::VehicleMessage_MVector* release_backleftwheelcom();
  void set_allocated_backleftwheelcom(::ChronoMessages::VehicleMessage_MVector* backleftwheelcom);

  // required .ChronoMessages.VehicleMessage.MQuaternion ChassisRot = 10;
  bool has_chassisrot() const;
  void clear_chassisrot();
  static const int kChassisRotFieldNumber = 10;
  const ::ChronoMessages::VehicleMessage_MQuaternion& chassisrot() const;
  ::ChronoMessages::VehicleMessage_MQuaternion* mutable_chassisrot();
  ::ChronoMessages::VehicleMessage_MQuaternion* release_chassisrot();
  void set_allocated_chassisrot(::ChronoMessages::VehicleMessage_MQuaternion* chassisrot);

  // required .ChronoMessages.VehicleMessage.MQuaternion FrontRightWheelRot = 11;
  bool has_frontrightwheelrot() const;
  void clear_frontrightwheelrot();
  static const int kFrontRightWheelRotFieldNumber = 11;
  const ::ChronoMessages::VehicleMessage_MQuaternion& frontrightwheelrot() const;
  ::ChronoMessages::VehicleMessage_MQuaternion* mutable_frontrightwheelrot();
  ::ChronoMessages::VehicleMessage_MQuaternion* release_frontrightwheelrot();
  void set_allocated_frontrightwheelrot(::ChronoMessages::VehicleMessage_MQuaternion* frontrightwheelrot);

  // required .ChronoMessages.VehicleMessage.MQuaternion FrontLeftWheelRot = 12;
  bool has_frontleftwheelrot() const;
  void clear_frontleftwheelrot();
  static const int kFrontLeftWheelRotFieldNumber = 12;
  const ::ChronoMessages::VehicleMessage_MQuaternion& frontleftwheelrot() const;
  ::ChronoMessages::VehicleMessage_MQuaternion* mutable_frontleftwheelrot();
  ::ChronoMessages::VehicleMessage_MQuaternion* release_frontleftwheelrot();
  void set_allocated_frontleftwheelrot(::ChronoMessages::VehicleMessage_MQuaternion* frontleftwheelrot);

  // required .ChronoMessages.VehicleMessage.MQuaternion BackRightWheelRot = 13;
  bool has_backrightwheelrot() const;
  void clear_backrightwheelrot();
  static const int kBackRightWheelRotFieldNumber = 13;
  const ::ChronoMessages::VehicleMessage_MQuaternion& backrightwheelrot() const;
  ::ChronoMessages::VehicleMessage_MQuaternion* mutable_backrightwheelrot();
  ::ChronoMessages::VehicleMessage_MQuaternion* release_backrightwheelrot();
  void set_allocated_backrightwheelrot(::ChronoMessages::VehicleMessage_MQuaternion* backrightwheelrot);

  // required .ChronoMessages.VehicleMessage.MQuaternion BackLeftWheelRot = 14;
  bool has_backleftwheelrot() const;
  void clear_backleftwheelrot();
  static const int kBackLeftWheelRotFieldNumber = 14;
  const ::ChronoMessages::VehicleMessage_MQuaternion& backleftwheelrot() const;
  ::ChronoMessages::VehicleMessage_MQuaternion* mutable_backleftwheelrot();
  ::ChronoMessages::VehicleMessage_MQuaternion* release_backleftwheelrot();
  void set_allocated_backleftwheelrot(::ChronoMessages::VehicleMessage_MQuaternion* backleftwheelrot);

  // @@protoc_insertion_point(class_scope:ChronoMessages.VehicleMessage)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_vehicleid();
  inline void clear_has_vehicleid();
  inline void set_has_chtime();
  inline void clear_has_chtime();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_chassiscom();
  inline void clear_has_chassiscom();
  inline void set_has_frontrightwheelcom();
  inline void clear_has_frontrightwheelcom();
  inline void set_has_frontleftwheelcom();
  inline void clear_has_frontleftwheelcom();
  inline void set_has_backrightwheelcom();
  inline void clear_has_backrightwheelcom();
  inline void set_has_backleftwheelcom();
  inline void clear_has_backleftwheelcom();
  inline void set_has_chassisrot();
  inline void clear_has_chassisrot();
  inline void set_has_frontrightwheelrot();
  inline void clear_has_frontrightwheelrot();
  inline void set_has_frontleftwheelrot();
  inline void clear_has_frontleftwheelrot();
  inline void set_has_backrightwheelrot();
  inline void clear_has_backrightwheelrot();
  inline void set_has_backleftwheelrot();
  inline void clear_has_backleftwheelrot();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 timestamp_;
  ::google::protobuf::int32 vehicleid_;
  double chtime_;
  double speed_;
  ::ChronoMessages::VehicleMessage_MVector* chassiscom_;
  ::ChronoMessages::VehicleMessage_MVector* frontrightwheelcom_;
  ::ChronoMessages::VehicleMessage_MVector* frontleftwheelcom_;
  ::ChronoMessages::VehicleMessage_MVector* backrightwheelcom_;
  ::ChronoMessages::VehicleMessage_MVector* backleftwheelcom_;
  ::ChronoMessages::VehicleMessage_MQuaternion* chassisrot_;
  ::ChronoMessages::VehicleMessage_MQuaternion* frontrightwheelrot_;
  ::ChronoMessages::VehicleMessage_MQuaternion* frontleftwheelrot_;
  ::ChronoMessages::VehicleMessage_MQuaternion* backrightwheelrot_;
  ::ChronoMessages::VehicleMessage_MQuaternion* backleftwheelrot_;
  friend void  protobuf_AddDesc_ChronoMessages_2eproto();
  friend void protobuf_AssignDesc_ChronoMessages_2eproto();
  friend void protobuf_ShutdownFile_ChronoMessages_2eproto();

  void InitAsDefaultInstance();
  static VehicleMessage* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleMessage_MVector

// required double x = 1;
inline bool VehicleMessage_MVector::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VehicleMessage_MVector::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VehicleMessage_MVector::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VehicleMessage_MVector::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double VehicleMessage_MVector::x() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.VehicleMessage.MVector.x)
  return x_;
}
inline void VehicleMessage_MVector::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:ChronoMessages.VehicleMessage.MVector.x)
}

// required double y = 2;
inline bool VehicleMessage_MVector::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VehicleMessage_MVector::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VehicleMessage_MVector::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VehicleMessage_MVector::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double VehicleMessage_MVector::y() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.VehicleMessage.MVector.y)
  return y_;
}
inline void VehicleMessage_MVector::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:ChronoMessages.VehicleMessage.MVector.y)
}

// required double z = 3;
inline bool VehicleMessage_MVector::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VehicleMessage_MVector::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VehicleMessage_MVector::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VehicleMessage_MVector::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double VehicleMessage_MVector::z() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.VehicleMessage.MVector.z)
  return z_;
}
inline void VehicleMessage_MVector::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:ChronoMessages.VehicleMessage.MVector.z)
}

// -------------------------------------------------------------------

// VehicleMessage_MQuaternion

// required double e0 = 1;
inline bool VehicleMessage_MQuaternion::has_e0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VehicleMessage_MQuaternion::set_has_e0() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VehicleMessage_MQuaternion::clear_has_e0() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VehicleMessage_MQuaternion::clear_e0() {
  e0_ = 0;
  clear_has_e0();
}
inline double VehicleMessage_MQuaternion::e0() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.VehicleMessage.MQuaternion.e0)
  return e0_;
}
inline void VehicleMessage_MQuaternion::set_e0(double value) {
  set_has_e0();
  e0_ = value;
  // @@protoc_insertion_point(field_set:ChronoMessages.VehicleMessage.MQuaternion.e0)
}

// required double e1 = 2;
inline bool VehicleMessage_MQuaternion::has_e1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VehicleMessage_MQuaternion::set_has_e1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VehicleMessage_MQuaternion::clear_has_e1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VehicleMessage_MQuaternion::clear_e1() {
  e1_ = 0;
  clear_has_e1();
}
inline double VehicleMessage_MQuaternion::e1() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.VehicleMessage.MQuaternion.e1)
  return e1_;
}
inline void VehicleMessage_MQuaternion::set_e1(double value) {
  set_has_e1();
  e1_ = value;
  // @@protoc_insertion_point(field_set:ChronoMessages.VehicleMessage.MQuaternion.e1)
}

// required double e2 = 3;
inline bool VehicleMessage_MQuaternion::has_e2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VehicleMessage_MQuaternion::set_has_e2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VehicleMessage_MQuaternion::clear_has_e2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VehicleMessage_MQuaternion::clear_e2() {
  e2_ = 0;
  clear_has_e2();
}
inline double VehicleMessage_MQuaternion::e2() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.VehicleMessage.MQuaternion.e2)
  return e2_;
}
inline void VehicleMessage_MQuaternion::set_e2(double value) {
  set_has_e2();
  e2_ = value;
  // @@protoc_insertion_point(field_set:ChronoMessages.VehicleMessage.MQuaternion.e2)
}

// required double e3 = 4;
inline bool VehicleMessage_MQuaternion::has_e3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VehicleMessage_MQuaternion::set_has_e3() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VehicleMessage_MQuaternion::clear_has_e3() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VehicleMessage_MQuaternion::clear_e3() {
  e3_ = 0;
  clear_has_e3();
}
inline double VehicleMessage_MQuaternion::e3() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.VehicleMessage.MQuaternion.e3)
  return e3_;
}
inline void VehicleMessage_MQuaternion::set_e3(double value) {
  set_has_e3();
  e3_ = value;
  // @@protoc_insertion_point(field_set:ChronoMessages.VehicleMessage.MQuaternion.e3)
}

// -------------------------------------------------------------------

// VehicleMessage

// required int32 timestamp = 1;
inline bool VehicleMessage::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VehicleMessage::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VehicleMessage::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VehicleMessage::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline ::google::protobuf::int32 VehicleMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.VehicleMessage.timestamp)
  return timestamp_;
}
inline void VehicleMessage::set_timestamp(::google::protobuf::int32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ChronoMessages.VehicleMessage.timestamp)
}

// required int32 vehicleId = 2;
inline bool VehicleMessage::has_vehicleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VehicleMessage::set_has_vehicleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VehicleMessage::clear_has_vehicleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VehicleMessage::clear_vehicleid() {
  vehicleid_ = 0;
  clear_has_vehicleid();
}
inline ::google::protobuf::int32 VehicleMessage::vehicleid() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.VehicleMessage.vehicleId)
  return vehicleid_;
}
inline void VehicleMessage::set_vehicleid(::google::protobuf::int32 value) {
  set_has_vehicleid();
  vehicleid_ = value;
  // @@protoc_insertion_point(field_set:ChronoMessages.VehicleMessage.vehicleId)
}

// required double chTime = 3;
inline bool VehicleMessage::has_chtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VehicleMessage::set_has_chtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VehicleMessage::clear_has_chtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VehicleMessage::clear_chtime() {
  chtime_ = 0;
  clear_has_chtime();
}
inline double VehicleMessage::chtime() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.VehicleMessage.chTime)
  return chtime_;
}
inline void VehicleMessage::set_chtime(double value) {
  set_has_chtime();
  chtime_ = value;
  // @@protoc_insertion_point(field_set:ChronoMessages.VehicleMessage.chTime)
}

// required double speed = 4;
inline bool VehicleMessage::has_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VehicleMessage::set_has_speed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VehicleMessage::clear_has_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VehicleMessage::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline double VehicleMessage::speed() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.VehicleMessage.speed)
  return speed_;
}
inline void VehicleMessage::set_speed(double value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:ChronoMessages.VehicleMessage.speed)
}

// required .ChronoMessages.VehicleMessage.MVector ChassisCOM = 5;
inline bool VehicleMessage::has_chassiscom() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VehicleMessage::set_has_chassiscom() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VehicleMessage::clear_has_chassiscom() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VehicleMessage::clear_chassiscom() {
  if (chassiscom_ != NULL) chassiscom_->::ChronoMessages::VehicleMessage_MVector::Clear();
  clear_has_chassiscom();
}
inline const ::ChronoMessages::VehicleMessage_MVector& VehicleMessage::chassiscom() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.VehicleMessage.ChassisCOM)
  return chassiscom_ != NULL ? *chassiscom_ : *default_instance_->chassiscom_;
}
inline ::ChronoMessages::VehicleMessage_MVector* VehicleMessage::mutable_chassiscom() {
  set_has_chassiscom();
  if (chassiscom_ == NULL) {
    chassiscom_ = new ::ChronoMessages::VehicleMessage_MVector;
  }
  // @@protoc_insertion_point(field_mutable:ChronoMessages.VehicleMessage.ChassisCOM)
  return chassiscom_;
}
inline ::ChronoMessages::VehicleMessage_MVector* VehicleMessage::release_chassiscom() {
  // @@protoc_insertion_point(field_release:ChronoMessages.VehicleMessage.ChassisCOM)
  clear_has_chassiscom();
  ::ChronoMessages::VehicleMessage_MVector* temp = chassiscom_;
  chassiscom_ = NULL;
  return temp;
}
inline void VehicleMessage::set_allocated_chassiscom(::ChronoMessages::VehicleMessage_MVector* chassiscom) {
  delete chassiscom_;
  chassiscom_ = chassiscom;
  if (chassiscom) {
    set_has_chassiscom();
  } else {
    clear_has_chassiscom();
  }
  // @@protoc_insertion_point(field_set_allocated:ChronoMessages.VehicleMessage.ChassisCOM)
}

// required .ChronoMessages.VehicleMessage.MVector FrontRightWheelCOM = 6;
inline bool VehicleMessage::has_frontrightwheelcom() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VehicleMessage::set_has_frontrightwheelcom() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VehicleMessage::clear_has_frontrightwheelcom() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VehicleMessage::clear_frontrightwheelcom() {
  if (frontrightwheelcom_ != NULL) frontrightwheelcom_->::ChronoMessages::VehicleMessage_MVector::Clear();
  clear_has_frontrightwheelcom();
}
inline const ::ChronoMessages::VehicleMessage_MVector& VehicleMessage::frontrightwheelcom() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.VehicleMessage.FrontRightWheelCOM)
  return frontrightwheelcom_ != NULL ? *frontrightwheelcom_ : *default_instance_->frontrightwheelcom_;
}
inline ::ChronoMessages::VehicleMessage_MVector* VehicleMessage::mutable_frontrightwheelcom() {
  set_has_frontrightwheelcom();
  if (frontrightwheelcom_ == NULL) {
    frontrightwheelcom_ = new ::ChronoMessages::VehicleMessage_MVector;
  }
  // @@protoc_insertion_point(field_mutable:ChronoMessages.VehicleMessage.FrontRightWheelCOM)
  return frontrightwheelcom_;
}
inline ::ChronoMessages::VehicleMessage_MVector* VehicleMessage::release_frontrightwheelcom() {
  // @@protoc_insertion_point(field_release:ChronoMessages.VehicleMessage.FrontRightWheelCOM)
  clear_has_frontrightwheelcom();
  ::ChronoMessages::VehicleMessage_MVector* temp = frontrightwheelcom_;
  frontrightwheelcom_ = NULL;
  return temp;
}
inline void VehicleMessage::set_allocated_frontrightwheelcom(::ChronoMessages::VehicleMessage_MVector* frontrightwheelcom) {
  delete frontrightwheelcom_;
  frontrightwheelcom_ = frontrightwheelcom;
  if (frontrightwheelcom) {
    set_has_frontrightwheelcom();
  } else {
    clear_has_frontrightwheelcom();
  }
  // @@protoc_insertion_point(field_set_allocated:ChronoMessages.VehicleMessage.FrontRightWheelCOM)
}

// required .ChronoMessages.VehicleMessage.MVector FrontLeftWheelCOM = 7;
inline bool VehicleMessage::has_frontleftwheelcom() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VehicleMessage::set_has_frontleftwheelcom() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VehicleMessage::clear_has_frontleftwheelcom() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VehicleMessage::clear_frontleftwheelcom() {
  if (frontleftwheelcom_ != NULL) frontleftwheelcom_->::ChronoMessages::VehicleMessage_MVector::Clear();
  clear_has_frontleftwheelcom();
}
inline const ::ChronoMessages::VehicleMessage_MVector& VehicleMessage::frontleftwheelcom() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.VehicleMessage.FrontLeftWheelCOM)
  return frontleftwheelcom_ != NULL ? *frontleftwheelcom_ : *default_instance_->frontleftwheelcom_;
}
inline ::ChronoMessages::VehicleMessage_MVector* VehicleMessage::mutable_frontleftwheelcom() {
  set_has_frontleftwheelcom();
  if (frontleftwheelcom_ == NULL) {
    frontleftwheelcom_ = new ::ChronoMessages::VehicleMessage_MVector;
  }
  // @@protoc_insertion_point(field_mutable:ChronoMessages.VehicleMessage.FrontLeftWheelCOM)
  return frontleftwheelcom_;
}
inline ::ChronoMessages::VehicleMessage_MVector* VehicleMessage::release_frontleftwheelcom() {
  // @@protoc_insertion_point(field_release:ChronoMessages.VehicleMessage.FrontLeftWheelCOM)
  clear_has_frontleftwheelcom();
  ::ChronoMessages::VehicleMessage_MVector* temp = frontleftwheelcom_;
  frontleftwheelcom_ = NULL;
  return temp;
}
inline void VehicleMessage::set_allocated_frontleftwheelcom(::ChronoMessages::VehicleMessage_MVector* frontleftwheelcom) {
  delete frontleftwheelcom_;
  frontleftwheelcom_ = frontleftwheelcom;
  if (frontleftwheelcom) {
    set_has_frontleftwheelcom();
  } else {
    clear_has_frontleftwheelcom();
  }
  // @@protoc_insertion_point(field_set_allocated:ChronoMessages.VehicleMessage.FrontLeftWheelCOM)
}

// required .ChronoMessages.VehicleMessage.MVector BackRightWheelCOM = 8;
inline bool VehicleMessage::has_backrightwheelcom() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VehicleMessage::set_has_backrightwheelcom() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VehicleMessage::clear_has_backrightwheelcom() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VehicleMessage::clear_backrightwheelcom() {
  if (backrightwheelcom_ != NULL) backrightwheelcom_->::ChronoMessages::VehicleMessage_MVector::Clear();
  clear_has_backrightwheelcom();
}
inline const ::ChronoMessages::VehicleMessage_MVector& VehicleMessage::backrightwheelcom() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.VehicleMessage.BackRightWheelCOM)
  return backrightwheelcom_ != NULL ? *backrightwheelcom_ : *default_instance_->backrightwheelcom_;
}
inline ::ChronoMessages::VehicleMessage_MVector* VehicleMessage::mutable_backrightwheelcom() {
  set_has_backrightwheelcom();
  if (backrightwheelcom_ == NULL) {
    backrightwheelcom_ = new ::ChronoMessages::VehicleMessage_MVector;
  }
  // @@protoc_insertion_point(field_mutable:ChronoMessages.VehicleMessage.BackRightWheelCOM)
  return backrightwheelcom_;
}
inline ::ChronoMessages::VehicleMessage_MVector* VehicleMessage::release_backrightwheelcom() {
  // @@protoc_insertion_point(field_release:ChronoMessages.VehicleMessage.BackRightWheelCOM)
  clear_has_backrightwheelcom();
  ::ChronoMessages::VehicleMessage_MVector* temp = backrightwheelcom_;
  backrightwheelcom_ = NULL;
  return temp;
}
inline void VehicleMessage::set_allocated_backrightwheelcom(::ChronoMessages::VehicleMessage_MVector* backrightwheelcom) {
  delete backrightwheelcom_;
  backrightwheelcom_ = backrightwheelcom;
  if (backrightwheelcom) {
    set_has_backrightwheelcom();
  } else {
    clear_has_backrightwheelcom();
  }
  // @@protoc_insertion_point(field_set_allocated:ChronoMessages.VehicleMessage.BackRightWheelCOM)
}

// required .ChronoMessages.VehicleMessage.MVector BackLeftWheelCOM = 9;
inline bool VehicleMessage::has_backleftwheelcom() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VehicleMessage::set_has_backleftwheelcom() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VehicleMessage::clear_has_backleftwheelcom() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VehicleMessage::clear_backleftwheelcom() {
  if (backleftwheelcom_ != NULL) backleftwheelcom_->::ChronoMessages::VehicleMessage_MVector::Clear();
  clear_has_backleftwheelcom();
}
inline const ::ChronoMessages::VehicleMessage_MVector& VehicleMessage::backleftwheelcom() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.VehicleMessage.BackLeftWheelCOM)
  return backleftwheelcom_ != NULL ? *backleftwheelcom_ : *default_instance_->backleftwheelcom_;
}
inline ::ChronoMessages::VehicleMessage_MVector* VehicleMessage::mutable_backleftwheelcom() {
  set_has_backleftwheelcom();
  if (backleftwheelcom_ == NULL) {
    backleftwheelcom_ = new ::ChronoMessages::VehicleMessage_MVector;
  }
  // @@protoc_insertion_point(field_mutable:ChronoMessages.VehicleMessage.BackLeftWheelCOM)
  return backleftwheelcom_;
}
inline ::ChronoMessages::VehicleMessage_MVector* VehicleMessage::release_backleftwheelcom() {
  // @@protoc_insertion_point(field_release:ChronoMessages.VehicleMessage.BackLeftWheelCOM)
  clear_has_backleftwheelcom();
  ::ChronoMessages::VehicleMessage_MVector* temp = backleftwheelcom_;
  backleftwheelcom_ = NULL;
  return temp;
}
inline void VehicleMessage::set_allocated_backleftwheelcom(::ChronoMessages::VehicleMessage_MVector* backleftwheelcom) {
  delete backleftwheelcom_;
  backleftwheelcom_ = backleftwheelcom;
  if (backleftwheelcom) {
    set_has_backleftwheelcom();
  } else {
    clear_has_backleftwheelcom();
  }
  // @@protoc_insertion_point(field_set_allocated:ChronoMessages.VehicleMessage.BackLeftWheelCOM)
}

// required .ChronoMessages.VehicleMessage.MQuaternion ChassisRot = 10;
inline bool VehicleMessage::has_chassisrot() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void VehicleMessage::set_has_chassisrot() {
  _has_bits_[0] |= 0x00000200u;
}
inline void VehicleMessage::clear_has_chassisrot() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void VehicleMessage::clear_chassisrot() {
  if (chassisrot_ != NULL) chassisrot_->::ChronoMessages::VehicleMessage_MQuaternion::Clear();
  clear_has_chassisrot();
}
inline const ::ChronoMessages::VehicleMessage_MQuaternion& VehicleMessage::chassisrot() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.VehicleMessage.ChassisRot)
  return chassisrot_ != NULL ? *chassisrot_ : *default_instance_->chassisrot_;
}
inline ::ChronoMessages::VehicleMessage_MQuaternion* VehicleMessage::mutable_chassisrot() {
  set_has_chassisrot();
  if (chassisrot_ == NULL) {
    chassisrot_ = new ::ChronoMessages::VehicleMessage_MQuaternion;
  }
  // @@protoc_insertion_point(field_mutable:ChronoMessages.VehicleMessage.ChassisRot)
  return chassisrot_;
}
inline ::ChronoMessages::VehicleMessage_MQuaternion* VehicleMessage::release_chassisrot() {
  // @@protoc_insertion_point(field_release:ChronoMessages.VehicleMessage.ChassisRot)
  clear_has_chassisrot();
  ::ChronoMessages::VehicleMessage_MQuaternion* temp = chassisrot_;
  chassisrot_ = NULL;
  return temp;
}
inline void VehicleMessage::set_allocated_chassisrot(::ChronoMessages::VehicleMessage_MQuaternion* chassisrot) {
  delete chassisrot_;
  chassisrot_ = chassisrot;
  if (chassisrot) {
    set_has_chassisrot();
  } else {
    clear_has_chassisrot();
  }
  // @@protoc_insertion_point(field_set_allocated:ChronoMessages.VehicleMessage.ChassisRot)
}

// required .ChronoMessages.VehicleMessage.MQuaternion FrontRightWheelRot = 11;
inline bool VehicleMessage::has_frontrightwheelrot() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void VehicleMessage::set_has_frontrightwheelrot() {
  _has_bits_[0] |= 0x00000400u;
}
inline void VehicleMessage::clear_has_frontrightwheelrot() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void VehicleMessage::clear_frontrightwheelrot() {
  if (frontrightwheelrot_ != NULL) frontrightwheelrot_->::ChronoMessages::VehicleMessage_MQuaternion::Clear();
  clear_has_frontrightwheelrot();
}
inline const ::ChronoMessages::VehicleMessage_MQuaternion& VehicleMessage::frontrightwheelrot() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.VehicleMessage.FrontRightWheelRot)
  return frontrightwheelrot_ != NULL ? *frontrightwheelrot_ : *default_instance_->frontrightwheelrot_;
}
inline ::ChronoMessages::VehicleMessage_MQuaternion* VehicleMessage::mutable_frontrightwheelrot() {
  set_has_frontrightwheelrot();
  if (frontrightwheelrot_ == NULL) {
    frontrightwheelrot_ = new ::ChronoMessages::VehicleMessage_MQuaternion;
  }
  // @@protoc_insertion_point(field_mutable:ChronoMessages.VehicleMessage.FrontRightWheelRot)
  return frontrightwheelrot_;
}
inline ::ChronoMessages::VehicleMessage_MQuaternion* VehicleMessage::release_frontrightwheelrot() {
  // @@protoc_insertion_point(field_release:ChronoMessages.VehicleMessage.FrontRightWheelRot)
  clear_has_frontrightwheelrot();
  ::ChronoMessages::VehicleMessage_MQuaternion* temp = frontrightwheelrot_;
  frontrightwheelrot_ = NULL;
  return temp;
}
inline void VehicleMessage::set_allocated_frontrightwheelrot(::ChronoMessages::VehicleMessage_MQuaternion* frontrightwheelrot) {
  delete frontrightwheelrot_;
  frontrightwheelrot_ = frontrightwheelrot;
  if (frontrightwheelrot) {
    set_has_frontrightwheelrot();
  } else {
    clear_has_frontrightwheelrot();
  }
  // @@protoc_insertion_point(field_set_allocated:ChronoMessages.VehicleMessage.FrontRightWheelRot)
}

// required .ChronoMessages.VehicleMessage.MQuaternion FrontLeftWheelRot = 12;
inline bool VehicleMessage::has_frontleftwheelrot() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void VehicleMessage::set_has_frontleftwheelrot() {
  _has_bits_[0] |= 0x00000800u;
}
inline void VehicleMessage::clear_has_frontleftwheelrot() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void VehicleMessage::clear_frontleftwheelrot() {
  if (frontleftwheelrot_ != NULL) frontleftwheelrot_->::ChronoMessages::VehicleMessage_MQuaternion::Clear();
  clear_has_frontleftwheelrot();
}
inline const ::ChronoMessages::VehicleMessage_MQuaternion& VehicleMessage::frontleftwheelrot() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.VehicleMessage.FrontLeftWheelRot)
  return frontleftwheelrot_ != NULL ? *frontleftwheelrot_ : *default_instance_->frontleftwheelrot_;
}
inline ::ChronoMessages::VehicleMessage_MQuaternion* VehicleMessage::mutable_frontleftwheelrot() {
  set_has_frontleftwheelrot();
  if (frontleftwheelrot_ == NULL) {
    frontleftwheelrot_ = new ::ChronoMessages::VehicleMessage_MQuaternion;
  }
  // @@protoc_insertion_point(field_mutable:ChronoMessages.VehicleMessage.FrontLeftWheelRot)
  return frontleftwheelrot_;
}
inline ::ChronoMessages::VehicleMessage_MQuaternion* VehicleMessage::release_frontleftwheelrot() {
  // @@protoc_insertion_point(field_release:ChronoMessages.VehicleMessage.FrontLeftWheelRot)
  clear_has_frontleftwheelrot();
  ::ChronoMessages::VehicleMessage_MQuaternion* temp = frontleftwheelrot_;
  frontleftwheelrot_ = NULL;
  return temp;
}
inline void VehicleMessage::set_allocated_frontleftwheelrot(::ChronoMessages::VehicleMessage_MQuaternion* frontleftwheelrot) {
  delete frontleftwheelrot_;
  frontleftwheelrot_ = frontleftwheelrot;
  if (frontleftwheelrot) {
    set_has_frontleftwheelrot();
  } else {
    clear_has_frontleftwheelrot();
  }
  // @@protoc_insertion_point(field_set_allocated:ChronoMessages.VehicleMessage.FrontLeftWheelRot)
}

// required .ChronoMessages.VehicleMessage.MQuaternion BackRightWheelRot = 13;
inline bool VehicleMessage::has_backrightwheelrot() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void VehicleMessage::set_has_backrightwheelrot() {
  _has_bits_[0] |= 0x00001000u;
}
inline void VehicleMessage::clear_has_backrightwheelrot() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void VehicleMessage::clear_backrightwheelrot() {
  if (backrightwheelrot_ != NULL) backrightwheelrot_->::ChronoMessages::VehicleMessage_MQuaternion::Clear();
  clear_has_backrightwheelrot();
}
inline const ::ChronoMessages::VehicleMessage_MQuaternion& VehicleMessage::backrightwheelrot() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.VehicleMessage.BackRightWheelRot)
  return backrightwheelrot_ != NULL ? *backrightwheelrot_ : *default_instance_->backrightwheelrot_;
}
inline ::ChronoMessages::VehicleMessage_MQuaternion* VehicleMessage::mutable_backrightwheelrot() {
  set_has_backrightwheelrot();
  if (backrightwheelrot_ == NULL) {
    backrightwheelrot_ = new ::ChronoMessages::VehicleMessage_MQuaternion;
  }
  // @@protoc_insertion_point(field_mutable:ChronoMessages.VehicleMessage.BackRightWheelRot)
  return backrightwheelrot_;
}
inline ::ChronoMessages::VehicleMessage_MQuaternion* VehicleMessage::release_backrightwheelrot() {
  // @@protoc_insertion_point(field_release:ChronoMessages.VehicleMessage.BackRightWheelRot)
  clear_has_backrightwheelrot();
  ::ChronoMessages::VehicleMessage_MQuaternion* temp = backrightwheelrot_;
  backrightwheelrot_ = NULL;
  return temp;
}
inline void VehicleMessage::set_allocated_backrightwheelrot(::ChronoMessages::VehicleMessage_MQuaternion* backrightwheelrot) {
  delete backrightwheelrot_;
  backrightwheelrot_ = backrightwheelrot;
  if (backrightwheelrot) {
    set_has_backrightwheelrot();
  } else {
    clear_has_backrightwheelrot();
  }
  // @@protoc_insertion_point(field_set_allocated:ChronoMessages.VehicleMessage.BackRightWheelRot)
}

// required .ChronoMessages.VehicleMessage.MQuaternion BackLeftWheelRot = 14;
inline bool VehicleMessage::has_backleftwheelrot() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void VehicleMessage::set_has_backleftwheelrot() {
  _has_bits_[0] |= 0x00002000u;
}
inline void VehicleMessage::clear_has_backleftwheelrot() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void VehicleMessage::clear_backleftwheelrot() {
  if (backleftwheelrot_ != NULL) backleftwheelrot_->::ChronoMessages::VehicleMessage_MQuaternion::Clear();
  clear_has_backleftwheelrot();
}
inline const ::ChronoMessages::VehicleMessage_MQuaternion& VehicleMessage::backleftwheelrot() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.VehicleMessage.BackLeftWheelRot)
  return backleftwheelrot_ != NULL ? *backleftwheelrot_ : *default_instance_->backleftwheelrot_;
}
inline ::ChronoMessages::VehicleMessage_MQuaternion* VehicleMessage::mutable_backleftwheelrot() {
  set_has_backleftwheelrot();
  if (backleftwheelrot_ == NULL) {
    backleftwheelrot_ = new ::ChronoMessages::VehicleMessage_MQuaternion;
  }
  // @@protoc_insertion_point(field_mutable:ChronoMessages.VehicleMessage.BackLeftWheelRot)
  return backleftwheelrot_;
}
inline ::ChronoMessages::VehicleMessage_MQuaternion* VehicleMessage::release_backleftwheelrot() {
  // @@protoc_insertion_point(field_release:ChronoMessages.VehicleMessage.BackLeftWheelRot)
  clear_has_backleftwheelrot();
  ::ChronoMessages::VehicleMessage_MQuaternion* temp = backleftwheelrot_;
  backleftwheelrot_ = NULL;
  return temp;
}
inline void VehicleMessage::set_allocated_backleftwheelrot(::ChronoMessages::VehicleMessage_MQuaternion* backleftwheelrot) {
  delete backleftwheelrot_;
  backleftwheelrot_ = backleftwheelrot;
  if (backleftwheelrot) {
    set_has_backleftwheelrot();
  } else {
    clear_has_backleftwheelrot();
  }
  // @@protoc_insertion_point(field_set_allocated:ChronoMessages.VehicleMessage.BackLeftWheelRot)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ChronoMessages

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ChronoMessages_2eproto__INCLUDED
